{"ast":null,"code":"/*eslint no-unused-vars: [\"error\", {\"args\": \"none\"}]*/\n'use strict';\n\nvar TextTools = require('./textTools');\n\nvar StyleContextStack = require('./styleContextStack');\n\nvar ColumnCalculator = require('./columnCalculator');\n\nvar isString = require('./helpers').isString;\n\nvar isNumber = require('./helpers').isNumber;\n\nvar isObject = require('./helpers').isObject;\n\nvar isArray = require('./helpers').isArray;\n\nvar fontStringify = require('./helpers').fontStringify;\n\nvar getNodeId = require('./helpers').getNodeId;\n\nvar pack = require('./helpers').pack;\n\nvar qrEncoder = require('./qrEnc.js');\n/**\r\n * @private\r\n */\n\n\nfunction DocMeasure(fontProvider, styleDictionary, defaultStyle, imageMeasure, svgMeasure, tableLayouts, images) {\n  this.textTools = new TextTools(fontProvider);\n  this.styleStack = new StyleContextStack(styleDictionary, defaultStyle);\n  this.imageMeasure = imageMeasure;\n  this.svgMeasure = svgMeasure;\n  this.tableLayouts = tableLayouts;\n  this.images = images;\n  this.autoImageIndex = 1;\n}\n/**\r\n * Measures all nodes and sets min/max-width properties required for the second\r\n * layout-pass.\r\n * @param  {Object} docStructure document-definition-object\r\n * @return {Object}              document-measurement-object\r\n */\n\n\nDocMeasure.prototype.measureDocument = function (docStructure) {\n  return this.measureNode(docStructure);\n};\n\nDocMeasure.prototype.measureNode = function (node) {\n  var self = this;\n  return this.styleStack.auto(node, function () {\n    // TODO: refactor + rethink whether this is the proper way to handle margins\n    node._margin = getNodeMargin(node);\n\n    if (node.columns) {\n      return extendMargins(self.measureColumns(node));\n    } else if (node.stack) {\n      return extendMargins(self.measureVerticalContainer(node));\n    } else if (node.ul) {\n      return extendMargins(self.measureUnorderedList(node));\n    } else if (node.ol) {\n      return extendMargins(self.measureOrderedList(node));\n    } else if (node.table) {\n      return extendMargins(self.measureTable(node));\n    } else if (node.text !== undefined) {\n      return extendMargins(self.measureLeaf(node));\n    } else if (node.toc) {\n      return extendMargins(self.measureToc(node));\n    } else if (node.image) {\n      return extendMargins(self.measureImage(node));\n    } else if (node.svg) {\n      return extendMargins(self.measureSVG(node));\n    } else if (node.canvas) {\n      return extendMargins(self.measureCanvas(node));\n    } else if (node.qr) {\n      return extendMargins(self.measureQr(node));\n    } else {\n      throw 'Unrecognized document structure: ' + JSON.stringify(node, fontStringify);\n    }\n  });\n\n  function extendMargins(node) {\n    var margin = node._margin;\n\n    if (margin) {\n      node._minWidth += margin[0] + margin[2];\n      node._maxWidth += margin[0] + margin[2];\n    }\n\n    return node;\n  }\n\n  function getNodeMargin() {\n    function processSingleMargins(node, currentMargin) {\n      if (node.marginLeft || node.marginTop || node.marginRight || node.marginBottom) {\n        return [node.marginLeft || currentMargin[0] || 0, node.marginTop || currentMargin[1] || 0, node.marginRight || currentMargin[2] || 0, node.marginBottom || currentMargin[3] || 0];\n      }\n\n      return currentMargin;\n    }\n\n    function flattenStyleArray(styleArray) {\n      var flattenedStyles = {};\n\n      for (var i = styleArray.length - 1; i >= 0; i--) {\n        var styleName = styleArray[i];\n        var style = self.styleStack.styleDictionary[styleName];\n\n        for (var key in style) {\n          if (style.hasOwnProperty(key)) {\n            flattenedStyles[key] = style[key];\n          }\n        }\n      }\n\n      return flattenedStyles;\n    }\n\n    function convertMargin(margin) {\n      if (isNumber(margin)) {\n        margin = [margin, margin, margin, margin];\n      } else if (isArray(margin)) {\n        if (margin.length === 2) {\n          margin = [margin[0], margin[1], margin[0], margin[1]];\n        }\n      }\n\n      return margin;\n    }\n\n    var margin = [undefined, undefined, undefined, undefined];\n\n    if (node.style) {\n      var styleArray = isArray(node.style) ? node.style : [node.style];\n      var flattenedStyleArray = flattenStyleArray(styleArray);\n\n      if (flattenedStyleArray) {\n        margin = processSingleMargins(flattenedStyleArray, margin);\n      }\n\n      if (flattenedStyleArray.margin) {\n        margin = convertMargin(flattenedStyleArray.margin);\n      }\n    }\n\n    margin = processSingleMargins(node, margin);\n\n    if (node.margin) {\n      margin = convertMargin(node.margin);\n    }\n\n    if (margin[0] === undefined && margin[1] === undefined && margin[2] === undefined && margin[3] === undefined) {\n      return null;\n    } else {\n      return margin;\n    }\n  }\n};\n\nDocMeasure.prototype.convertIfBase64Image = function (node) {\n  if (/^data:image\\/(jpeg|jpg|png);base64,/.test(node.image)) {\n    var label = '$$pdfmake$$' + this.autoImageIndex++;\n    this.images[label] = node.image;\n    node.image = label;\n  }\n};\n\nDocMeasure.prototype.measureImageWithDimensions = function (node, dimensions) {\n  if (node.fit) {\n    var factor = dimensions.width / dimensions.height > node.fit[0] / node.fit[1] ? node.fit[0] / dimensions.width : node.fit[1] / dimensions.height;\n    node._width = node._minWidth = node._maxWidth = dimensions.width * factor;\n    node._height = dimensions.height * factor;\n  } else {\n    node._width = node._minWidth = node._maxWidth = node.width || dimensions.width;\n    node._height = node.height || dimensions.height * node._width / dimensions.width;\n\n    if (isNumber(node.maxWidth) && node.maxWidth < node._width) {\n      node._width = node._minWidth = node._maxWidth = node.maxWidth;\n      node._height = node._width * dimensions.height / dimensions.width;\n    }\n\n    if (isNumber(node.maxHeight) && node.maxHeight < node._height) {\n      node._height = node.maxHeight;\n      node._width = node._minWidth = node._maxWidth = node._height * dimensions.width / dimensions.height;\n    }\n\n    if (isNumber(node.minWidth) && node.minWidth > node._width) {\n      node._width = node._minWidth = node._maxWidth = node.minWidth;\n      node._height = node._width * dimensions.height / dimensions.width;\n    }\n\n    if (isNumber(node.minHeight) && node.minHeight > node._height) {\n      node._height = node.minHeight;\n      node._width = node._minWidth = node._maxWidth = node._height * dimensions.width / dimensions.height;\n    }\n  }\n\n  node._alignment = this.styleStack.getProperty('alignment');\n};\n\nDocMeasure.prototype.measureImage = function (node) {\n  if (this.images) {\n    this.convertIfBase64Image(node);\n  }\n\n  var dimensions = this.imageMeasure.measureImage(node.image);\n  this.measureImageWithDimensions(node, dimensions);\n  return node;\n};\n\nDocMeasure.prototype.measureSVG = function (node) {\n  var dimensions = this.svgMeasure.measureSVG(node.svg);\n  this.measureImageWithDimensions(node, dimensions);\n  node.font = this.styleStack.getProperty('font'); // scale SVG based on final dimension\n\n  node.svg = this.svgMeasure.writeDimensions(node.svg, {\n    width: node._width,\n    height: node._height\n  });\n  return node;\n};\n\nDocMeasure.prototype.measureLeaf = function (node) {\n  if (node._textRef && node._textRef._textNodeRef.text) {\n    node.text = node._textRef._textNodeRef.text;\n  } // Make sure style properties of the node itself are considered when building inlines.\n  // We could also just pass [node] to buildInlines, but that fails for bullet points.\n\n\n  var styleStack = this.styleStack.clone();\n  styleStack.push(node);\n  var data = this.textTools.buildInlines(node.text, styleStack);\n  node._inlines = data.items;\n  node._minWidth = data.minWidth;\n  node._maxWidth = data.maxWidth;\n  return node;\n};\n\nDocMeasure.prototype.measureToc = function (node) {\n  if (node.toc.title) {\n    node.toc.title = this.measureNode(node.toc.title);\n  }\n\n  if (node.toc._items.length > 0) {\n    var body = [];\n    var textStyle = node.toc.textStyle || {};\n    var numberStyle = node.toc.numberStyle || textStyle;\n    var textMargin = node.toc.textMargin || [0, 0, 0, 0];\n\n    for (var i = 0, l = node.toc._items.length; i < l; i++) {\n      var item = node.toc._items[i];\n      var lineStyle = item._textNodeRef.tocStyle || textStyle;\n      var lineMargin = item._textNodeRef.tocMargin || textMargin;\n      var lineNumberStyle = item._textNodeRef.tocNumberStyle || numberStyle;\n      var destination = getNodeId(item._nodeRef);\n      body.push([{\n        text: item._textNodeRef.text,\n        linkToDestination: destination,\n        alignment: 'left',\n        style: lineStyle,\n        margin: lineMargin\n      }, {\n        text: '00000',\n        linkToDestination: destination,\n        alignment: 'right',\n        _tocItemRef: item._nodeRef,\n        style: lineNumberStyle,\n        margin: [0, lineMargin[1], 0, lineMargin[3]]\n      }]);\n    }\n\n    node.toc._table = {\n      table: {\n        dontBreakRows: true,\n        widths: ['*', 'auto'],\n        body: body\n      },\n      layout: 'noBorders'\n    };\n    node.toc._table = this.measureNode(node.toc._table);\n  }\n\n  return node;\n};\n\nDocMeasure.prototype.measureVerticalContainer = function (node) {\n  var items = node.stack;\n  node._minWidth = 0;\n  node._maxWidth = 0;\n\n  for (var i = 0, l = items.length; i < l; i++) {\n    items[i] = this.measureNode(items[i]);\n    node._minWidth = Math.max(node._minWidth, items[i]._minWidth);\n    node._maxWidth = Math.max(node._maxWidth, items[i]._maxWidth);\n  }\n\n  return node;\n};\n\nDocMeasure.prototype.gapSizeForList = function () {\n  return this.textTools.sizeOfString('9. ', this.styleStack);\n};\n\nDocMeasure.prototype.buildUnorderedMarker = function (styleStack, gapSize, type) {\n  function buildDisc(gapSize, color) {\n    // TODO: ascender-based calculations\n    var radius = gapSize.fontSize / 6;\n    return {\n      canvas: [{\n        x: radius,\n        y: gapSize.height / gapSize.lineHeight + gapSize.descender - gapSize.fontSize / 3,\n        r1: radius,\n        r2: radius,\n        type: 'ellipse',\n        color: color\n      }]\n    };\n  }\n\n  function buildSquare(gapSize, color) {\n    // TODO: ascender-based calculations\n    var size = gapSize.fontSize / 3;\n    return {\n      canvas: [{\n        x: 0,\n        y: gapSize.height / gapSize.lineHeight + gapSize.descender - gapSize.fontSize / 3 - size / 2,\n        h: size,\n        w: size,\n        type: 'rect',\n        color: color\n      }]\n    };\n  }\n\n  function buildCircle(gapSize, color) {\n    // TODO: ascender-based calculations\n    var radius = gapSize.fontSize / 6;\n    return {\n      canvas: [{\n        x: radius,\n        y: gapSize.height / gapSize.lineHeight + gapSize.descender - gapSize.fontSize / 3,\n        r1: radius,\n        r2: radius,\n        type: 'ellipse',\n        lineColor: color\n      }]\n    };\n  }\n\n  var marker;\n  var color = styleStack.getProperty('markerColor') || styleStack.getProperty('color') || 'black';\n\n  switch (type) {\n    case 'circle':\n      marker = buildCircle(gapSize, color);\n      break;\n\n    case 'square':\n      marker = buildSquare(gapSize, color);\n      break;\n\n    case 'none':\n      marker = {};\n      break;\n\n    case 'disc':\n    default:\n      marker = buildDisc(gapSize, color);\n      break;\n  }\n\n  marker._minWidth = marker._maxWidth = gapSize.width;\n  marker._minHeight = marker._maxHeight = gapSize.height;\n  return marker;\n};\n\nDocMeasure.prototype.buildOrderedMarker = function (counter, styleStack, type, separator) {\n  function prepareAlpha(counter) {\n    function toAlpha(num) {\n      return (num >= 26 ? toAlpha((num / 26 >> 0) - 1) : '') + 'abcdefghijklmnopqrstuvwxyz'[num % 26 >> 0];\n    }\n\n    if (counter < 1) {\n      return counter.toString();\n    }\n\n    return toAlpha(counter - 1);\n  }\n\n  function prepareRoman(counter) {\n    if (counter < 1 || counter > 4999) {\n      return counter.toString();\n    }\n\n    var num = counter;\n    var lookup = {\n      M: 1000,\n      CM: 900,\n      D: 500,\n      CD: 400,\n      C: 100,\n      XC: 90,\n      L: 50,\n      XL: 40,\n      X: 10,\n      IX: 9,\n      V: 5,\n      IV: 4,\n      I: 1\n    },\n        roman = '',\n        i;\n\n    for (i in lookup) {\n      while (num >= lookup[i]) {\n        roman += i;\n        num -= lookup[i];\n      }\n    }\n\n    return roman;\n  }\n\n  function prepareDecimal(counter) {\n    return counter.toString();\n  }\n\n  var counterText;\n\n  switch (type) {\n    case 'none':\n      counterText = null;\n      break;\n\n    case 'upper-alpha':\n      counterText = prepareAlpha(counter).toUpperCase();\n      break;\n\n    case 'lower-alpha':\n      counterText = prepareAlpha(counter);\n      break;\n\n    case 'upper-roman':\n      counterText = prepareRoman(counter);\n      break;\n\n    case 'lower-roman':\n      counterText = prepareRoman(counter).toLowerCase();\n      break;\n\n    case 'decimal':\n    default:\n      counterText = prepareDecimal(counter);\n      break;\n  }\n\n  if (counterText === null) {\n    return {};\n  }\n\n  if (separator) {\n    if (isArray(separator)) {\n      if (separator[0]) {\n        counterText = separator[0] + counterText;\n      }\n\n      if (separator[1]) {\n        counterText += separator[1];\n      }\n\n      counterText += ' ';\n    } else {\n      counterText += separator + ' ';\n    }\n  }\n\n  var textArray = {\n    text: counterText\n  };\n  var markerColor = styleStack.getProperty('markerColor');\n\n  if (markerColor) {\n    textArray.color = markerColor;\n  }\n\n  return {\n    _inlines: this.textTools.buildInlines(textArray, styleStack).items\n  };\n};\n\nDocMeasure.prototype.measureUnorderedList = function (node) {\n  var style = this.styleStack.clone();\n  var items = node.ul;\n  node.type = node.type || 'disc';\n  node._gapSize = this.gapSizeForList();\n  node._minWidth = 0;\n  node._maxWidth = 0;\n\n  for (var i = 0, l = items.length; i < l; i++) {\n    var item = items[i] = this.measureNode(items[i]);\n\n    if (!item.ol && !item.ul) {\n      item.listMarker = this.buildUnorderedMarker(style, node._gapSize, item.listType || node.type);\n    }\n\n    node._minWidth = Math.max(node._minWidth, items[i]._minWidth + node._gapSize.width);\n    node._maxWidth = Math.max(node._maxWidth, items[i]._maxWidth + node._gapSize.width);\n  }\n\n  return node;\n};\n\nDocMeasure.prototype.measureOrderedList = function (node) {\n  var style = this.styleStack.clone();\n  var items = node.ol;\n  node.type = node.type || 'decimal';\n  node.separator = node.separator || '.';\n  node.reversed = node.reversed || false;\n\n  if (!isNumber(node.start)) {\n    node.start = node.reversed ? items.length : 1;\n  }\n\n  node._gapSize = this.gapSizeForList();\n  node._minWidth = 0;\n  node._maxWidth = 0;\n  var counter = node.start;\n\n  for (var i = 0, l = items.length; i < l; i++) {\n    var item = items[i] = this.measureNode(items[i]);\n\n    if (!item.ol && !item.ul) {\n      var counterValue = isNumber(item.counter) ? item.counter : counter;\n      item.listMarker = this.buildOrderedMarker(counterValue, style, item.listType || node.type, node.separator);\n\n      if (item.listMarker._inlines) {\n        node._gapSize.width = Math.max(node._gapSize.width, item.listMarker._inlines[0].width);\n      }\n    } // TODO: else - nested lists numbering\n\n\n    node._minWidth = Math.max(node._minWidth, items[i]._minWidth);\n    node._maxWidth = Math.max(node._maxWidth, items[i]._maxWidth);\n\n    if (node.reversed) {\n      counter--;\n    } else {\n      counter++;\n    }\n  }\n\n  node._minWidth += node._gapSize.width;\n  node._maxWidth += node._gapSize.width;\n\n  for (var i = 0, l = items.length; i < l; i++) {\n    var item = items[i];\n\n    if (!item.ol && !item.ul) {\n      item.listMarker._minWidth = item.listMarker._maxWidth = node._gapSize.width;\n    }\n  }\n\n  return node;\n};\n\nDocMeasure.prototype.measureColumns = function (node) {\n  var columns = node.columns;\n  node._gap = this.styleStack.getProperty('columnGap') || 0;\n\n  for (var i = 0, l = columns.length; i < l; i++) {\n    columns[i] = this.measureNode(columns[i]);\n  }\n\n  var measures = ColumnCalculator.measureMinMax(columns);\n  var numGaps = columns.length > 0 ? columns.length - 1 : 0;\n  node._minWidth = measures.min + node._gap * numGaps;\n  node._maxWidth = measures.max + node._gap * numGaps;\n  return node;\n};\n\nDocMeasure.prototype.measureTable = function (node) {\n  extendTableWidths(node);\n  node._layout = getLayout(this.tableLayouts);\n  node._offsets = getOffsets(node._layout);\n  var colSpans = [];\n  var col, row, cols, rows;\n\n  for (col = 0, cols = node.table.body[0].length; col < cols; col++) {\n    var c = node.table.widths[col];\n    c._minWidth = 0;\n    c._maxWidth = 0;\n\n    for (row = 0, rows = node.table.body.length; row < rows; row++) {\n      var rowData = node.table.body[row];\n      var data = rowData[col];\n\n      if (data === undefined) {\n        console.error('Malformed table row ', rowData, 'in node ', node);\n        throw 'Malformed table row, a cell is undefined.';\n      }\n\n      if (data === null) {\n        // transform to object\n        data = '';\n      }\n\n      if (!data._span) {\n        data = rowData[col] = this.styleStack.auto(data, measureCb(this, data));\n\n        if (data.colSpan && data.colSpan > 1) {\n          markSpans(rowData, col, data.colSpan);\n          colSpans.push({\n            col: col,\n            span: data.colSpan,\n            minWidth: data._minWidth,\n            maxWidth: data._maxWidth\n          });\n        } else {\n          c._minWidth = Math.max(c._minWidth, data._minWidth);\n          c._maxWidth = Math.max(c._maxWidth, data._maxWidth);\n        }\n      }\n\n      if (data.rowSpan && data.rowSpan > 1) {\n        markVSpans(node.table, row, col, data.rowSpan);\n      }\n    }\n  }\n\n  extendWidthsForColSpans();\n  var measures = ColumnCalculator.measureMinMax(node.table.widths);\n  node._minWidth = measures.min + node._offsets.total;\n  node._maxWidth = measures.max + node._offsets.total;\n  return node;\n\n  function measureCb(_this, data) {\n    return function () {\n      if (isObject(data)) {\n        data.fillColor = _this.styleStack.getProperty('fillColor');\n        data.fillOpacity = _this.styleStack.getProperty('fillOpacity');\n      }\n\n      return _this.measureNode(data);\n    };\n  }\n\n  function getLayout(tableLayouts) {\n    var layout = node.layout;\n\n    if (isString(layout)) {\n      layout = tableLayouts[layout];\n    }\n\n    var defaultLayout = {\n      hLineWidth: function (i, node) {\n        return 1;\n      },\n      vLineWidth: function (i, node) {\n        return 1;\n      },\n      hLineColor: function (i, node) {\n        return 'black';\n      },\n      vLineColor: function (i, node) {\n        return 'black';\n      },\n      hLineStyle: function (i, node) {\n        return null;\n      },\n      vLineStyle: function (i, node) {\n        return null;\n      },\n      paddingLeft: function (i, node) {\n        return 4;\n      },\n      paddingRight: function (i, node) {\n        return 4;\n      },\n      paddingTop: function (i, node) {\n        return 2;\n      },\n      paddingBottom: function (i, node) {\n        return 2;\n      },\n      fillColor: function (i, node) {\n        return null;\n      },\n      fillOpacity: function (i, node) {\n        return 1;\n      },\n      defaultBorder: true\n    };\n    return pack(defaultLayout, layout);\n  }\n\n  function getOffsets(layout) {\n    var offsets = [];\n    var totalOffset = 0;\n    var prevRightPadding = 0;\n\n    for (var i = 0, l = node.table.widths.length; i < l; i++) {\n      var lOffset = prevRightPadding + layout.vLineWidth(i, node) + layout.paddingLeft(i, node);\n      offsets.push(lOffset);\n      totalOffset += lOffset;\n      prevRightPadding = layout.paddingRight(i, node);\n    }\n\n    totalOffset += prevRightPadding + layout.vLineWidth(node.table.widths.length, node);\n    return {\n      total: totalOffset,\n      offsets: offsets\n    };\n  }\n\n  function extendWidthsForColSpans() {\n    var q, j;\n\n    for (var i = 0, l = colSpans.length; i < l; i++) {\n      var span = colSpans[i];\n      var currentMinMax = getMinMax(span.col, span.span, node._offsets);\n      var minDifference = span.minWidth - currentMinMax.minWidth;\n      var maxDifference = span.maxWidth - currentMinMax.maxWidth;\n\n      if (minDifference > 0) {\n        q = minDifference / span.span;\n\n        for (j = 0; j < span.span; j++) {\n          node.table.widths[span.col + j]._minWidth += q;\n        }\n      }\n\n      if (maxDifference > 0) {\n        q = maxDifference / span.span;\n\n        for (j = 0; j < span.span; j++) {\n          node.table.widths[span.col + j]._maxWidth += q;\n        }\n      }\n    }\n  }\n\n  function getMinMax(col, span, offsets) {\n    var result = {\n      minWidth: 0,\n      maxWidth: 0\n    };\n\n    for (var i = 0; i < span; i++) {\n      result.minWidth += node.table.widths[col + i]._minWidth + (i ? offsets.offsets[col + i] : 0);\n      result.maxWidth += node.table.widths[col + i]._maxWidth + (i ? offsets.offsets[col + i] : 0);\n    }\n\n    return result;\n  }\n\n  function markSpans(rowData, col, span) {\n    for (var i = 1; i < span; i++) {\n      rowData[col + i] = {\n        _span: true,\n        _minWidth: 0,\n        _maxWidth: 0,\n        rowSpan: rowData[col].rowSpan\n      };\n    }\n  }\n\n  function markVSpans(table, row, col, span) {\n    for (var i = 1; i < span; i++) {\n      table.body[row + i][col] = {\n        _span: true,\n        _minWidth: 0,\n        _maxWidth: 0,\n        fillColor: table.body[row][col].fillColor,\n        fillOpacity: table.body[row][col].fillOpacity\n      };\n    }\n  }\n\n  function extendTableWidths(node) {\n    if (!node.table.widths) {\n      node.table.widths = 'auto';\n    }\n\n    if (isString(node.table.widths)) {\n      node.table.widths = [node.table.widths];\n\n      while (node.table.widths.length < node.table.body[0].length) {\n        node.table.widths.push(node.table.widths[node.table.widths.length - 1]);\n      }\n    }\n\n    for (var i = 0, l = node.table.widths.length; i < l; i++) {\n      var w = node.table.widths[i];\n\n      if (isNumber(w) || isString(w)) {\n        node.table.widths[i] = {\n          width: w\n        };\n      }\n    }\n  }\n};\n\nDocMeasure.prototype.measureCanvas = function (node) {\n  var w = 0,\n      h = 0;\n\n  for (var i = 0, l = node.canvas.length; i < l; i++) {\n    var vector = node.canvas[i];\n\n    switch (vector.type) {\n      case 'ellipse':\n        w = Math.max(w, vector.x + vector.r1);\n        h = Math.max(h, vector.y + vector.r2);\n        break;\n\n      case 'rect':\n        w = Math.max(w, vector.x + vector.w);\n        h = Math.max(h, vector.y + vector.h);\n        break;\n\n      case 'line':\n        w = Math.max(w, vector.x1, vector.x2);\n        h = Math.max(h, vector.y1, vector.y2);\n        break;\n\n      case 'polyline':\n        for (var i2 = 0, l2 = vector.points.length; i2 < l2; i2++) {\n          w = Math.max(w, vector.points[i2].x);\n          h = Math.max(h, vector.points[i2].y);\n        }\n\n        break;\n    }\n  }\n\n  node._minWidth = node._maxWidth = w;\n  node._minHeight = node._maxHeight = h;\n  node._alignment = this.styleStack.getProperty('alignment');\n  return node;\n};\n\nDocMeasure.prototype.measureQr = function (node) {\n  node = qrEncoder.measure(node);\n  node._alignment = this.styleStack.getProperty('alignment');\n  return node;\n};\n\nmodule.exports = DocMeasure;","map":{"version":3,"sources":["/home/julianallende/Desktop/proyecto_sapo/client/node_modules/pdfmake/src/docMeasure.js"],"names":["TextTools","require","StyleContextStack","ColumnCalculator","isString","isNumber","isObject","isArray","fontStringify","getNodeId","pack","qrEncoder","DocMeasure","fontProvider","styleDictionary","defaultStyle","imageMeasure","svgMeasure","tableLayouts","images","textTools","styleStack","autoImageIndex","prototype","measureDocument","docStructure","measureNode","node","self","auto","_margin","getNodeMargin","columns","extendMargins","measureColumns","stack","measureVerticalContainer","ul","measureUnorderedList","ol","measureOrderedList","table","measureTable","text","undefined","measureLeaf","toc","measureToc","image","measureImage","svg","measureSVG","canvas","measureCanvas","qr","measureQr","JSON","stringify","margin","_minWidth","_maxWidth","processSingleMargins","currentMargin","marginLeft","marginTop","marginRight","marginBottom","flattenStyleArray","styleArray","flattenedStyles","i","length","styleName","style","key","hasOwnProperty","convertMargin","flattenedStyleArray","convertIfBase64Image","test","label","measureImageWithDimensions","dimensions","fit","factor","width","height","_width","_height","maxWidth","maxHeight","minWidth","minHeight","_alignment","getProperty","font","writeDimensions","_textRef","_textNodeRef","clone","push","data","buildInlines","_inlines","items","title","_items","body","textStyle","numberStyle","textMargin","l","item","lineStyle","tocStyle","lineMargin","tocMargin","lineNumberStyle","tocNumberStyle","destination","_nodeRef","linkToDestination","alignment","_tocItemRef","_table","dontBreakRows","widths","layout","Math","max","gapSizeForList","sizeOfString","buildUnorderedMarker","gapSize","type","buildDisc","color","radius","fontSize","x","y","lineHeight","descender","r1","r2","buildSquare","size","h","w","buildCircle","lineColor","marker","_minHeight","_maxHeight","buildOrderedMarker","counter","separator","prepareAlpha","toAlpha","num","toString","prepareRoman","lookup","M","CM","D","CD","C","XC","L","XL","X","IX","V","IV","I","roman","prepareDecimal","counterText","toUpperCase","toLowerCase","textArray","markerColor","_gapSize","listMarker","listType","reversed","start","counterValue","_gap","measures","measureMinMax","numGaps","min","extendTableWidths","_layout","getLayout","_offsets","getOffsets","colSpans","col","row","cols","rows","c","rowData","console","error","_span","measureCb","colSpan","markSpans","span","rowSpan","markVSpans","extendWidthsForColSpans","total","_this","fillColor","fillOpacity","defaultLayout","hLineWidth","vLineWidth","hLineColor","vLineColor","hLineStyle","vLineStyle","paddingLeft","paddingRight","paddingTop","paddingBottom","defaultBorder","offsets","totalOffset","prevRightPadding","lOffset","q","j","currentMinMax","getMinMax","minDifference","maxDifference","result","vector","x1","x2","y1","y2","i2","l2","points","measure","module","exports"],"mappings":"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","sourcesContent":["/*eslint no-unused-vars: [\"error\", {\"args\": \"none\"}]*/\r\n\r\n'use strict';\r\n\r\nvar TextTools = require('./textTools');\r\nvar StyleContextStack = require('./styleContextStack');\r\nvar ColumnCalculator = require('./columnCalculator');\r\nvar isString = require('./helpers').isString;\r\nvar isNumber = require('./helpers').isNumber;\r\nvar isObject = require('./helpers').isObject;\r\nvar isArray = require('./helpers').isArray;\r\nvar fontStringify = require('./helpers').fontStringify;\r\nvar getNodeId = require('./helpers').getNodeId;\r\nvar pack = require('./helpers').pack;\r\nvar qrEncoder = require('./qrEnc.js');\r\n\r\n/**\r\n * @private\r\n */\r\nfunction DocMeasure(fontProvider, styleDictionary, defaultStyle, imageMeasure, svgMeasure, tableLayouts, images) {\r\n\tthis.textTools = new TextTools(fontProvider);\r\n\tthis.styleStack = new StyleContextStack(styleDictionary, defaultStyle);\r\n\tthis.imageMeasure = imageMeasure;\r\n\tthis.svgMeasure = svgMeasure;\r\n\tthis.tableLayouts = tableLayouts;\r\n\tthis.images = images;\r\n\tthis.autoImageIndex = 1;\r\n}\r\n\r\n/**\r\n * Measures all nodes and sets min/max-width properties required for the second\r\n * layout-pass.\r\n * @param  {Object} docStructure document-definition-object\r\n * @return {Object}              document-measurement-object\r\n */\r\nDocMeasure.prototype.measureDocument = function (docStructure) {\r\n\treturn this.measureNode(docStructure);\r\n};\r\n\r\nDocMeasure.prototype.measureNode = function (node) {\r\n\r\n\tvar self = this;\r\n\r\n\treturn this.styleStack.auto(node, function () {\r\n\t\t// TODO: refactor + rethink whether this is the proper way to handle margins\r\n\t\tnode._margin = getNodeMargin(node);\r\n\r\n\t\tif (node.columns) {\r\n\t\t\treturn extendMargins(self.measureColumns(node));\r\n\t\t} else if (node.stack) {\r\n\t\t\treturn extendMargins(self.measureVerticalContainer(node));\r\n\t\t} else if (node.ul) {\r\n\t\t\treturn extendMargins(self.measureUnorderedList(node));\r\n\t\t} else if (node.ol) {\r\n\t\t\treturn extendMargins(self.measureOrderedList(node));\r\n\t\t} else if (node.table) {\r\n\t\t\treturn extendMargins(self.measureTable(node));\r\n\t\t} else if (node.text !== undefined) {\r\n\t\t\treturn extendMargins(self.measureLeaf(node));\r\n\t\t} else if (node.toc) {\r\n\t\t\treturn extendMargins(self.measureToc(node));\r\n\t\t} else if (node.image) {\r\n\t\t\treturn extendMargins(self.measureImage(node));\r\n\t\t} else if (node.svg) {\r\n\t\t\treturn extendMargins(self.measureSVG(node));\r\n\t\t} else if (node.canvas) {\r\n\t\t\treturn extendMargins(self.measureCanvas(node));\r\n\t\t} else if (node.qr) {\r\n\t\t\treturn extendMargins(self.measureQr(node));\r\n\t\t} else {\r\n\t\t\tthrow 'Unrecognized document structure: ' + JSON.stringify(node, fontStringify);\r\n\t\t}\r\n\t});\r\n\r\n\tfunction extendMargins(node) {\r\n\t\tvar margin = node._margin;\r\n\r\n\t\tif (margin) {\r\n\t\t\tnode._minWidth += margin[0] + margin[2];\r\n\t\t\tnode._maxWidth += margin[0] + margin[2];\r\n\t\t}\r\n\r\n\t\treturn node;\r\n\t}\r\n\r\n\tfunction getNodeMargin() {\r\n\r\n\t\tfunction processSingleMargins(node, currentMargin) {\r\n\t\t\tif (node.marginLeft || node.marginTop || node.marginRight || node.marginBottom) {\r\n\t\t\t\treturn [\r\n\t\t\t\t\tnode.marginLeft || currentMargin[0] || 0,\r\n\t\t\t\t\tnode.marginTop || currentMargin[1] || 0,\r\n\t\t\t\t\tnode.marginRight || currentMargin[2] || 0,\r\n\t\t\t\t\tnode.marginBottom || currentMargin[3] || 0\r\n\t\t\t\t];\r\n\t\t\t}\r\n\t\t\treturn currentMargin;\r\n\t\t}\r\n\r\n\t\tfunction flattenStyleArray(styleArray) {\r\n\t\t\tvar flattenedStyles = {};\r\n\t\t\tfor (var i = styleArray.length - 1; i >= 0; i--) {\r\n\t\t\t\tvar styleName = styleArray[i];\r\n\t\t\t\tvar style = self.styleStack.styleDictionary[styleName];\r\n\t\t\t\tfor (var key in style) {\r\n\t\t\t\t\tif (style.hasOwnProperty(key)) {\r\n\t\t\t\t\t\tflattenedStyles[key] = style[key];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn flattenedStyles;\r\n\t\t}\r\n\r\n\t\tfunction convertMargin(margin) {\r\n\t\t\tif (isNumber(margin)) {\r\n\t\t\t\tmargin = [margin, margin, margin, margin];\r\n\t\t\t} else if (isArray(margin)) {\r\n\t\t\t\tif (margin.length === 2) {\r\n\t\t\t\t\tmargin = [margin[0], margin[1], margin[0], margin[1]];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn margin;\r\n\t\t}\r\n\r\n\t\tvar margin = [undefined, undefined, undefined, undefined];\r\n\r\n\t\tif (node.style) {\r\n\t\t\tvar styleArray = isArray(node.style) ? node.style : [node.style];\r\n\t\t\tvar flattenedStyleArray = flattenStyleArray(styleArray);\r\n\r\n\t\t\tif (flattenedStyleArray) {\r\n\t\t\t\tmargin = processSingleMargins(flattenedStyleArray, margin);\r\n\t\t\t}\r\n\r\n\t\t\tif (flattenedStyleArray.margin) {\r\n\t\t\t\tmargin = convertMargin(flattenedStyleArray.margin);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tmargin = processSingleMargins(node, margin);\r\n\r\n\t\tif (node.margin) {\r\n\t\t\tmargin = convertMargin(node.margin);\r\n\t\t}\r\n\r\n\t\tif (margin[0] === undefined && margin[1] === undefined && margin[2] === undefined && margin[3] === undefined) {\r\n\t\t\treturn null;\r\n\t\t} else {\r\n\t\t\treturn margin;\r\n\t\t}\r\n\t}\r\n};\r\n\r\nDocMeasure.prototype.convertIfBase64Image = function (node) {\r\n\tif (/^data:image\\/(jpeg|jpg|png);base64,/.test(node.image)) {\r\n\t\tvar label = '$$pdfmake$$' + this.autoImageIndex++;\r\n\t\tthis.images[label] = node.image;\r\n\t\tnode.image = label;\r\n\t}\r\n};\r\n\r\nDocMeasure.prototype.measureImageWithDimensions = function (node, dimensions) {\r\n\tif (node.fit) {\r\n\t\tvar factor = (dimensions.width / dimensions.height > node.fit[0] / node.fit[1]) ? node.fit[0] / dimensions.width : node.fit[1] / dimensions.height;\r\n\t\tnode._width = node._minWidth = node._maxWidth = dimensions.width * factor;\r\n\t\tnode._height = dimensions.height * factor;\r\n\t} else {\r\n\t\tnode._width = node._minWidth = node._maxWidth = node.width || dimensions.width;\r\n\t\tnode._height = node.height || (dimensions.height * node._width / dimensions.width);\r\n\r\n\t\tif (isNumber(node.maxWidth) && node.maxWidth < node._width) {\r\n\t\t\tnode._width = node._minWidth = node._maxWidth = node.maxWidth;\r\n\t\t\tnode._height = node._width * dimensions.height / dimensions.width;\r\n\t\t}\r\n\r\n\t\tif (isNumber(node.maxHeight) && node.maxHeight < node._height) {\r\n\t\t\tnode._height = node.maxHeight;\r\n\t\t\tnode._width = node._minWidth = node._maxWidth = node._height * dimensions.width / dimensions.height;\r\n\t\t}\r\n\r\n\t\tif (isNumber(node.minWidth) && node.minWidth > node._width) {\r\n\t\t\tnode._width = node._minWidth = node._maxWidth = node.minWidth;\r\n\t\t\tnode._height = node._width * dimensions.height / dimensions.width;\r\n\t\t}\r\n\r\n\t\tif (isNumber(node.minHeight) && node.minHeight > node._height) {\r\n\t\t\tnode._height = node.minHeight;\r\n\t\t\tnode._width = node._minWidth = node._maxWidth = node._height * dimensions.width / dimensions.height;\r\n\t\t}\r\n\t}\r\n\r\n\tnode._alignment = this.styleStack.getProperty('alignment');\r\n};\r\n\r\nDocMeasure.prototype.measureImage = function (node) {\r\n\tif (this.images) {\r\n\t\tthis.convertIfBase64Image(node);\r\n\t}\r\n\r\n\tvar dimensions = this.imageMeasure.measureImage(node.image);\r\n\r\n\tthis.measureImageWithDimensions(node, dimensions);\r\n\r\n\treturn node;\r\n};\r\n\r\nDocMeasure.prototype.measureSVG = function (node) {\r\n\r\n\tvar dimensions = this.svgMeasure.measureSVG(node.svg);\r\n\r\n\tthis.measureImageWithDimensions(node, dimensions);\r\n\r\n\tnode.font = this.styleStack.getProperty('font');\r\n\r\n\t// scale SVG based on final dimension\r\n\tnode.svg = this.svgMeasure.writeDimensions(node.svg, {\r\n\t\twidth: node._width,\r\n\t\theight: node._height\r\n\t});\r\n\r\n\treturn node;\r\n};\r\n\r\nDocMeasure.prototype.measureLeaf = function (node) {\r\n\r\n\tif (node._textRef && node._textRef._textNodeRef.text) {\r\n\t\tnode.text = node._textRef._textNodeRef.text;\r\n\t}\r\n\r\n\t// Make sure style properties of the node itself are considered when building inlines.\r\n\t// We could also just pass [node] to buildInlines, but that fails for bullet points.\r\n\tvar styleStack = this.styleStack.clone();\r\n\tstyleStack.push(node);\r\n\r\n\tvar data = this.textTools.buildInlines(node.text, styleStack);\r\n\r\n\tnode._inlines = data.items;\r\n\tnode._minWidth = data.minWidth;\r\n\tnode._maxWidth = data.maxWidth;\r\n\r\n\treturn node;\r\n};\r\n\r\nDocMeasure.prototype.measureToc = function (node) {\r\n\tif (node.toc.title) {\r\n\t\tnode.toc.title = this.measureNode(node.toc.title);\r\n\t}\r\n\r\n\tif (node.toc._items.length > 0) {\r\n\t\tvar body = [];\r\n\t\tvar textStyle = node.toc.textStyle || {};\r\n\t\tvar numberStyle = node.toc.numberStyle || textStyle;\r\n\t\tvar textMargin = node.toc.textMargin || [0, 0, 0, 0];\r\n\t\tfor (var i = 0, l = node.toc._items.length; i < l; i++) {\r\n\t\t\tvar item = node.toc._items[i];\r\n\t\t\tvar lineStyle = item._textNodeRef.tocStyle || textStyle;\r\n\t\t\tvar lineMargin = item._textNodeRef.tocMargin || textMargin;\r\n\t\t\tvar lineNumberStyle = item._textNodeRef.tocNumberStyle || numberStyle;\r\n\t\t\tvar destination = getNodeId(item._nodeRef);\r\n\t\t\tbody.push([\r\n\t\t\t\t{ text: item._textNodeRef.text, linkToDestination: destination, alignment: 'left', style: lineStyle, margin: lineMargin },\r\n\t\t\t\t{ text: '00000', linkToDestination: destination, alignment: 'right', _tocItemRef: item._nodeRef, style: lineNumberStyle, margin: [0, lineMargin[1], 0, lineMargin[3]] }\r\n\t\t\t]);\r\n\t\t}\r\n\r\n\r\n\t\tnode.toc._table = {\r\n\t\t\ttable: {\r\n\t\t\t\tdontBreakRows: true,\r\n\t\t\t\twidths: ['*', 'auto'],\r\n\t\t\t\tbody: body\r\n\t\t\t},\r\n\t\t\tlayout: 'noBorders'\r\n\t\t};\r\n\r\n\t\tnode.toc._table = this.measureNode(node.toc._table);\r\n\t}\r\n\r\n\treturn node;\r\n};\r\n\r\nDocMeasure.prototype.measureVerticalContainer = function (node) {\r\n\tvar items = node.stack;\r\n\r\n\tnode._minWidth = 0;\r\n\tnode._maxWidth = 0;\r\n\r\n\tfor (var i = 0, l = items.length; i < l; i++) {\r\n\t\titems[i] = this.measureNode(items[i]);\r\n\r\n\t\tnode._minWidth = Math.max(node._minWidth, items[i]._minWidth);\r\n\t\tnode._maxWidth = Math.max(node._maxWidth, items[i]._maxWidth);\r\n\t}\r\n\r\n\treturn node;\r\n};\r\n\r\nDocMeasure.prototype.gapSizeForList = function () {\r\n\treturn this.textTools.sizeOfString('9. ', this.styleStack);\r\n};\r\n\r\nDocMeasure.prototype.buildUnorderedMarker = function (styleStack, gapSize, type) {\r\n\tfunction buildDisc(gapSize, color) {\r\n\t\t// TODO: ascender-based calculations\r\n\t\tvar radius = gapSize.fontSize / 6;\r\n\t\treturn {\r\n\t\t\tcanvas: [{\r\n\t\t\t\tx: radius,\r\n\t\t\t\ty: (gapSize.height / gapSize.lineHeight) + gapSize.descender - gapSize.fontSize / 3,\r\n\t\t\t\tr1: radius,\r\n\t\t\t\tr2: radius,\r\n\t\t\t\ttype: 'ellipse',\r\n\t\t\t\tcolor: color\r\n\t\t\t}]\r\n\t\t};\r\n\t}\r\n\r\n\tfunction buildSquare(gapSize, color) {\r\n\t\t// TODO: ascender-based calculations\r\n\t\tvar size = gapSize.fontSize / 3;\r\n\t\treturn {\r\n\t\t\tcanvas: [{\r\n\t\t\t\tx: 0,\r\n\t\t\t\ty: (gapSize.height / gapSize.lineHeight) + gapSize.descender - (gapSize.fontSize / 3) - (size / 2),\r\n\t\t\t\th: size,\r\n\t\t\t\tw: size,\r\n\t\t\t\ttype: 'rect',\r\n\t\t\t\tcolor: color\r\n\t\t\t}]\r\n\t\t};\r\n\t}\r\n\r\n\tfunction buildCircle(gapSize, color) {\r\n\t\t// TODO: ascender-based calculations\r\n\t\tvar radius = gapSize.fontSize / 6;\r\n\t\treturn {\r\n\t\t\tcanvas: [{\r\n\t\t\t\tx: radius,\r\n\t\t\t\ty: (gapSize.height / gapSize.lineHeight) + gapSize.descender - gapSize.fontSize / 3,\r\n\t\t\t\tr1: radius,\r\n\t\t\t\tr2: radius,\r\n\t\t\t\ttype: 'ellipse',\r\n\t\t\t\tlineColor: color\r\n\t\t\t}]\r\n\t\t};\r\n\t}\r\n\r\n\tvar marker;\r\n\tvar color = styleStack.getProperty('markerColor') || styleStack.getProperty('color') || 'black';\r\n\r\n\tswitch (type) {\r\n\t\tcase 'circle':\r\n\t\t\tmarker = buildCircle(gapSize, color);\r\n\t\t\tbreak;\r\n\r\n\t\tcase 'square':\r\n\t\t\tmarker = buildSquare(gapSize, color);\r\n\t\t\tbreak;\r\n\r\n\t\tcase 'none':\r\n\t\t\tmarker = {};\r\n\t\t\tbreak;\r\n\r\n\t\tcase 'disc':\r\n\t\tdefault:\r\n\t\t\tmarker = buildDisc(gapSize, color);\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\tmarker._minWidth = marker._maxWidth = gapSize.width;\r\n\tmarker._minHeight = marker._maxHeight = gapSize.height;\r\n\r\n\treturn marker;\r\n};\r\n\r\nDocMeasure.prototype.buildOrderedMarker = function (counter, styleStack, type, separator) {\r\n\tfunction prepareAlpha(counter) {\r\n\t\tfunction toAlpha(num) {\r\n\t\t\treturn (num >= 26 ? toAlpha((num / 26 >> 0) - 1) : '') + 'abcdefghijklmnopqrstuvwxyz'[num % 26 >> 0];\r\n\t\t}\r\n\r\n\t\tif (counter < 1) {\r\n\t\t\treturn counter.toString();\r\n\t\t}\r\n\r\n\t\treturn toAlpha(counter - 1);\r\n\t}\r\n\r\n\tfunction prepareRoman(counter) {\r\n\t\tif (counter < 1 || counter > 4999) {\r\n\t\t\treturn counter.toString();\r\n\t\t}\r\n\t\tvar num = counter;\r\n\t\tvar lookup = { M: 1000, CM: 900, D: 500, CD: 400, C: 100, XC: 90, L: 50, XL: 40, X: 10, IX: 9, V: 5, IV: 4, I: 1 }, roman = '', i;\r\n\t\tfor (i in lookup) {\r\n\t\t\twhile (num >= lookup[i]) {\r\n\t\t\t\troman += i;\r\n\t\t\t\tnum -= lookup[i];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn roman;\r\n\t}\r\n\r\n\tfunction prepareDecimal(counter) {\r\n\t\treturn counter.toString();\r\n\t}\r\n\r\n\tvar counterText;\r\n\tswitch (type) {\r\n\t\tcase 'none':\r\n\t\t\tcounterText = null;\r\n\t\t\tbreak;\r\n\r\n\t\tcase 'upper-alpha':\r\n\t\t\tcounterText = prepareAlpha(counter).toUpperCase();\r\n\t\t\tbreak;\r\n\r\n\t\tcase 'lower-alpha':\r\n\t\t\tcounterText = prepareAlpha(counter);\r\n\t\t\tbreak;\r\n\r\n\t\tcase 'upper-roman':\r\n\t\t\tcounterText = prepareRoman(counter);\r\n\t\t\tbreak;\r\n\r\n\t\tcase 'lower-roman':\r\n\t\t\tcounterText = prepareRoman(counter).toLowerCase();\r\n\t\t\tbreak;\r\n\r\n\t\tcase 'decimal':\r\n\t\tdefault:\r\n\t\t\tcounterText = prepareDecimal(counter);\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\tif (counterText === null) {\r\n\t\treturn {};\r\n\t}\r\n\r\n\tif (separator) {\r\n\t\tif (isArray(separator)) {\r\n\t\t\tif (separator[0]) {\r\n\t\t\t\tcounterText = separator[0] + counterText;\r\n\t\t\t}\r\n\r\n\t\t\tif (separator[1]) {\r\n\t\t\t\tcounterText += separator[1];\r\n\t\t\t}\r\n\t\t\tcounterText += ' ';\r\n\t\t} else {\r\n\t\t\tcounterText += separator + ' ';\r\n\t\t}\r\n\t}\r\n\r\n\tvar textArray = { text: counterText };\r\n\tvar markerColor = styleStack.getProperty('markerColor');\r\n\tif (markerColor) {\r\n\t\ttextArray.color = markerColor;\r\n\t}\r\n\r\n\treturn { _inlines: this.textTools.buildInlines(textArray, styleStack).items };\r\n};\r\n\r\nDocMeasure.prototype.measureUnorderedList = function (node) {\r\n\tvar style = this.styleStack.clone();\r\n\tvar items = node.ul;\r\n\tnode.type = node.type || 'disc';\r\n\tnode._gapSize = this.gapSizeForList();\r\n\tnode._minWidth = 0;\r\n\tnode._maxWidth = 0;\r\n\r\n\tfor (var i = 0, l = items.length; i < l; i++) {\r\n\t\tvar item = items[i] = this.measureNode(items[i]);\r\n\r\n\t\tif (!item.ol && !item.ul) {\r\n\t\t\titem.listMarker = this.buildUnorderedMarker(style, node._gapSize, item.listType || node.type);\r\n\t\t}\r\n\r\n\t\tnode._minWidth = Math.max(node._minWidth, items[i]._minWidth + node._gapSize.width);\r\n\t\tnode._maxWidth = Math.max(node._maxWidth, items[i]._maxWidth + node._gapSize.width);\r\n\t}\r\n\r\n\treturn node;\r\n};\r\n\r\nDocMeasure.prototype.measureOrderedList = function (node) {\r\n\tvar style = this.styleStack.clone();\r\n\tvar items = node.ol;\r\n\tnode.type = node.type || 'decimal';\r\n\tnode.separator = node.separator || '.';\r\n\tnode.reversed = node.reversed || false;\r\n\tif (!isNumber(node.start)) {\r\n\t\tnode.start = node.reversed ? items.length : 1;\r\n\t}\r\n\tnode._gapSize = this.gapSizeForList();\r\n\tnode._minWidth = 0;\r\n\tnode._maxWidth = 0;\r\n\r\n\tvar counter = node.start;\r\n\tfor (var i = 0, l = items.length; i < l; i++) {\r\n\t\tvar item = items[i] = this.measureNode(items[i]);\r\n\r\n\t\tif (!item.ol && !item.ul) {\r\n\t\t\tvar counterValue = isNumber(item.counter) ? item.counter : counter;\r\n\t\t\titem.listMarker = this.buildOrderedMarker(counterValue, style, item.listType || node.type, node.separator);\r\n\t\t\tif (item.listMarker._inlines) {\r\n\t\t\t\tnode._gapSize.width = Math.max(node._gapSize.width, item.listMarker._inlines[0].width);\r\n\t\t\t}\r\n\t\t}  // TODO: else - nested lists numbering\r\n\r\n\t\tnode._minWidth = Math.max(node._minWidth, items[i]._minWidth);\r\n\t\tnode._maxWidth = Math.max(node._maxWidth, items[i]._maxWidth);\r\n\r\n\t\tif (node.reversed) {\r\n\t\t\tcounter--;\r\n\t\t} else {\r\n\t\t\tcounter++;\r\n\t\t}\r\n\t}\r\n\r\n\tnode._minWidth += node._gapSize.width;\r\n\tnode._maxWidth += node._gapSize.width;\r\n\r\n\tfor (var i = 0, l = items.length; i < l; i++) {\r\n\t\tvar item = items[i];\r\n\t\tif (!item.ol && !item.ul) {\r\n\t\t\titem.listMarker._minWidth = item.listMarker._maxWidth = node._gapSize.width;\r\n\t\t}\r\n\t}\r\n\r\n\treturn node;\r\n};\r\n\r\nDocMeasure.prototype.measureColumns = function (node) {\r\n\tvar columns = node.columns;\r\n\tnode._gap = this.styleStack.getProperty('columnGap') || 0;\r\n\r\n\tfor (var i = 0, l = columns.length; i < l; i++) {\r\n\t\tcolumns[i] = this.measureNode(columns[i]);\r\n\t}\r\n\r\n\tvar measures = ColumnCalculator.measureMinMax(columns);\r\n\r\n\tvar numGaps = (columns.length > 0) ? (columns.length - 1) : 0;\r\n\tnode._minWidth = measures.min + node._gap * numGaps;\r\n\tnode._maxWidth = measures.max + node._gap * numGaps;\r\n\r\n\treturn node;\r\n};\r\n\r\nDocMeasure.prototype.measureTable = function (node) {\r\n\textendTableWidths(node);\r\n\tnode._layout = getLayout(this.tableLayouts);\r\n\tnode._offsets = getOffsets(node._layout);\r\n\r\n\tvar colSpans = [];\r\n\tvar col, row, cols, rows;\r\n\r\n\tfor (col = 0, cols = node.table.body[0].length; col < cols; col++) {\r\n\t\tvar c = node.table.widths[col];\r\n\t\tc._minWidth = 0;\r\n\t\tc._maxWidth = 0;\r\n\r\n\t\tfor (row = 0, rows = node.table.body.length; row < rows; row++) {\r\n\t\t\tvar rowData = node.table.body[row];\r\n\t\t\tvar data = rowData[col];\r\n\t\t\tif (data === undefined) {\r\n\t\t\t\tconsole.error('Malformed table row ', rowData, 'in node ', node);\r\n\t\t\t\tthrow 'Malformed table row, a cell is undefined.';\r\n\t\t\t}\r\n\t\t\tif (data === null) { // transform to object\r\n\t\t\t\tdata = '';\r\n\t\t\t}\r\n\r\n\t\t\tif (!data._span) {\r\n\t\t\t\tdata = rowData[col] = this.styleStack.auto(data, measureCb(this, data));\r\n\r\n\t\t\t\tif (data.colSpan && data.colSpan > 1) {\r\n\t\t\t\t\tmarkSpans(rowData, col, data.colSpan);\r\n\t\t\t\t\tcolSpans.push({ col: col, span: data.colSpan, minWidth: data._minWidth, maxWidth: data._maxWidth });\r\n\t\t\t\t} else {\r\n\t\t\t\t\tc._minWidth = Math.max(c._minWidth, data._minWidth);\r\n\t\t\t\t\tc._maxWidth = Math.max(c._maxWidth, data._maxWidth);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (data.rowSpan && data.rowSpan > 1) {\r\n\t\t\t\tmarkVSpans(node.table, row, col, data.rowSpan);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\textendWidthsForColSpans();\r\n\r\n\tvar measures = ColumnCalculator.measureMinMax(node.table.widths);\r\n\r\n\tnode._minWidth = measures.min + node._offsets.total;\r\n\tnode._maxWidth = measures.max + node._offsets.total;\r\n\r\n\treturn node;\r\n\r\n\tfunction measureCb(_this, data) {\r\n\t\treturn function () {\r\n\t\t\tif (isObject(data)) {\r\n\t\t\t\tdata.fillColor = _this.styleStack.getProperty('fillColor');\r\n\t\t\t\tdata.fillOpacity = _this.styleStack.getProperty('fillOpacity');\r\n\t\t\t}\r\n\t\t\treturn _this.measureNode(data);\r\n\t\t};\r\n\t}\r\n\r\n\tfunction getLayout(tableLayouts) {\r\n\t\tvar layout = node.layout;\r\n\r\n\t\tif (isString(layout)) {\r\n\t\t\tlayout = tableLayouts[layout];\r\n\t\t}\r\n\r\n\t\tvar defaultLayout = {\r\n\t\t\thLineWidth: function (i, node) {\r\n\t\t\t\treturn 1;\r\n\t\t\t},\r\n\t\t\tvLineWidth: function (i, node) {\r\n\t\t\t\treturn 1;\r\n\t\t\t},\r\n\t\t\thLineColor: function (i, node) {\r\n\t\t\t\treturn 'black';\r\n\t\t\t},\r\n\t\t\tvLineColor: function (i, node) {\r\n\t\t\t\treturn 'black';\r\n\t\t\t},\r\n\t\t\thLineStyle: function (i, node) {\r\n\t\t\t\treturn null;\r\n\t\t\t},\r\n\t\t\tvLineStyle: function (i, node) {\r\n\t\t\t\treturn null;\r\n\t\t\t},\r\n\t\t\tpaddingLeft: function (i, node) {\r\n\t\t\t\treturn 4;\r\n\t\t\t},\r\n\t\t\tpaddingRight: function (i, node) {\r\n\t\t\t\treturn 4;\r\n\t\t\t},\r\n\t\t\tpaddingTop: function (i, node) {\r\n\t\t\t\treturn 2;\r\n\t\t\t},\r\n\t\t\tpaddingBottom: function (i, node) {\r\n\t\t\t\treturn 2;\r\n\t\t\t},\r\n\t\t\tfillColor: function (i, node) {\r\n\t\t\t\treturn null;\r\n\t\t\t},\r\n\t\t\tfillOpacity: function (i, node) {\r\n\t\t\t\treturn 1;\r\n\t\t\t},\r\n\t\t\tdefaultBorder: true\r\n\t\t};\r\n\r\n\t\treturn pack(defaultLayout, layout);\r\n\t}\r\n\r\n\tfunction getOffsets(layout) {\r\n\t\tvar offsets = [];\r\n\t\tvar totalOffset = 0;\r\n\t\tvar prevRightPadding = 0;\r\n\r\n\t\tfor (var i = 0, l = node.table.widths.length; i < l; i++) {\r\n\t\t\tvar lOffset = prevRightPadding + layout.vLineWidth(i, node) + layout.paddingLeft(i, node);\r\n\t\t\toffsets.push(lOffset);\r\n\t\t\ttotalOffset += lOffset;\r\n\t\t\tprevRightPadding = layout.paddingRight(i, node);\r\n\t\t}\r\n\r\n\t\ttotalOffset += prevRightPadding + layout.vLineWidth(node.table.widths.length, node);\r\n\r\n\t\treturn {\r\n\t\t\ttotal: totalOffset,\r\n\t\t\toffsets: offsets\r\n\t\t};\r\n\t}\r\n\r\n\tfunction extendWidthsForColSpans() {\r\n\t\tvar q, j;\r\n\r\n\t\tfor (var i = 0, l = colSpans.length; i < l; i++) {\r\n\t\t\tvar span = colSpans[i];\r\n\r\n\t\t\tvar currentMinMax = getMinMax(span.col, span.span, node._offsets);\r\n\t\t\tvar minDifference = span.minWidth - currentMinMax.minWidth;\r\n\t\t\tvar maxDifference = span.maxWidth - currentMinMax.maxWidth;\r\n\r\n\t\t\tif (minDifference > 0) {\r\n\t\t\t\tq = minDifference / span.span;\r\n\r\n\t\t\t\tfor (j = 0; j < span.span; j++) {\r\n\t\t\t\t\tnode.table.widths[span.col + j]._minWidth += q;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (maxDifference > 0) {\r\n\t\t\t\tq = maxDifference / span.span;\r\n\r\n\t\t\t\tfor (j = 0; j < span.span; j++) {\r\n\t\t\t\t\tnode.table.widths[span.col + j]._maxWidth += q;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getMinMax(col, span, offsets) {\r\n\t\tvar result = { minWidth: 0, maxWidth: 0 };\r\n\r\n\t\tfor (var i = 0; i < span; i++) {\r\n\t\t\tresult.minWidth += node.table.widths[col + i]._minWidth + (i ? offsets.offsets[col + i] : 0);\r\n\t\t\tresult.maxWidth += node.table.widths[col + i]._maxWidth + (i ? offsets.offsets[col + i] : 0);\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tfunction markSpans(rowData, col, span) {\r\n\t\tfor (var i = 1; i < span; i++) {\r\n\t\t\trowData[col + i] = {\r\n\t\t\t\t_span: true,\r\n\t\t\t\t_minWidth: 0,\r\n\t\t\t\t_maxWidth: 0,\r\n\t\t\t\trowSpan: rowData[col].rowSpan\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\r\n\tfunction markVSpans(table, row, col, span) {\r\n\t\tfor (var i = 1; i < span; i++) {\r\n\t\t\ttable.body[row + i][col] = {\r\n\t\t\t\t_span: true,\r\n\t\t\t\t_minWidth: 0,\r\n\t\t\t\t_maxWidth: 0,\r\n\t\t\t\tfillColor: table.body[row][col].fillColor,\r\n\t\t\t\tfillOpacity: table.body[row][col].fillOpacity\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\r\n\tfunction extendTableWidths(node) {\r\n\t\tif (!node.table.widths) {\r\n\t\t\tnode.table.widths = 'auto';\r\n\t\t}\r\n\r\n\t\tif (isString(node.table.widths)) {\r\n\t\t\tnode.table.widths = [node.table.widths];\r\n\r\n\t\t\twhile (node.table.widths.length < node.table.body[0].length) {\r\n\t\t\t\tnode.table.widths.push(node.table.widths[node.table.widths.length - 1]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (var i = 0, l = node.table.widths.length; i < l; i++) {\r\n\t\t\tvar w = node.table.widths[i];\r\n\t\t\tif (isNumber(w) || isString(w)) {\r\n\t\t\t\tnode.table.widths[i] = { width: w };\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};\r\n\r\nDocMeasure.prototype.measureCanvas = function (node) {\r\n\tvar w = 0, h = 0;\r\n\r\n\tfor (var i = 0, l = node.canvas.length; i < l; i++) {\r\n\t\tvar vector = node.canvas[i];\r\n\r\n\t\tswitch (vector.type) {\r\n\t\t\tcase 'ellipse':\r\n\t\t\t\tw = Math.max(w, vector.x + vector.r1);\r\n\t\t\t\th = Math.max(h, vector.y + vector.r2);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'rect':\r\n\t\t\t\tw = Math.max(w, vector.x + vector.w);\r\n\t\t\t\th = Math.max(h, vector.y + vector.h);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'line':\r\n\t\t\t\tw = Math.max(w, vector.x1, vector.x2);\r\n\t\t\t\th = Math.max(h, vector.y1, vector.y2);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'polyline':\r\n\t\t\t\tfor (var i2 = 0, l2 = vector.points.length; i2 < l2; i2++) {\r\n\t\t\t\t\tw = Math.max(w, vector.points[i2].x);\r\n\t\t\t\t\th = Math.max(h, vector.points[i2].y);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\tnode._minWidth = node._maxWidth = w;\r\n\tnode._minHeight = node._maxHeight = h;\r\n\tnode._alignment = this.styleStack.getProperty('alignment');\r\n\r\n\treturn node;\r\n};\r\n\r\nDocMeasure.prototype.measureQr = function (node) {\r\n\tnode = qrEncoder.measure(node);\r\n\tnode._alignment = this.styleStack.getProperty('alignment');\r\n\treturn node;\r\n};\r\n\r\nmodule.exports = DocMeasure;\r\n"]},"metadata":{},"sourceType":"script"}