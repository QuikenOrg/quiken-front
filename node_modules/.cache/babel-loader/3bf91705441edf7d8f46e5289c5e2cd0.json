{"ast":null,"code":"'use strict';\n\nvar isArray = require('./helpers').isArray;\n\nfunction typeName(bold, italics) {\n  var type = 'normal';\n\n  if (bold && italics) {\n    type = 'bolditalics';\n  } else if (bold) {\n    type = 'bold';\n  } else if (italics) {\n    type = 'italics';\n  }\n\n  return type;\n}\n\nfunction FontProvider(fontDescriptors, pdfKitDoc) {\n  this.fonts = {};\n  this.pdfKitDoc = pdfKitDoc;\n  this.fontCache = {};\n\n  for (var font in fontDescriptors) {\n    if (fontDescriptors.hasOwnProperty(font)) {\n      var fontDef = fontDescriptors[font];\n      this.fonts[font] = {\n        normal: fontDef.normal,\n        bold: fontDef.bold,\n        italics: fontDef.italics,\n        bolditalics: fontDef.bolditalics\n      };\n    }\n  }\n}\n\nFontProvider.prototype.getFontType = function (bold, italics) {\n  return typeName(bold, italics);\n};\n\nFontProvider.prototype.getFontFile = function (familyName, bold, italics) {\n  var type = this.getFontType(bold, italics);\n\n  if (!this.fonts[familyName] || !this.fonts[familyName][type]) {\n    return null;\n  }\n\n  return this.fonts[familyName][type];\n};\n\nFontProvider.prototype.provideFont = function (familyName, bold, italics) {\n  var type = this.getFontType(bold, italics);\n\n  if (this.getFontFile(familyName, bold, italics) === null) {\n    throw new Error('Font \\'' + familyName + '\\' in style \\'' + type + '\\' is not defined in the font section of the document definition.');\n  }\n\n  this.fontCache[familyName] = this.fontCache[familyName] || {};\n\n  if (!this.fontCache[familyName][type]) {\n    var def = this.fonts[familyName][type];\n\n    if (!isArray(def)) {\n      def = [def];\n    }\n\n    this.fontCache[familyName][type] = this.pdfKitDoc.font.apply(this.pdfKitDoc, def)._font;\n  }\n\n  return this.fontCache[familyName][type];\n};\n\nmodule.exports = FontProvider;","map":{"version":3,"sources":["/home/julianallende/Desktop/proyecto_sapo/client/node_modules/pdfmake/src/fontProvider.js"],"names":["isArray","require","typeName","bold","italics","type","FontProvider","fontDescriptors","pdfKitDoc","fonts","fontCache","font","hasOwnProperty","fontDef","normal","bolditalics","prototype","getFontType","getFontFile","familyName","provideFont","Error","def","apply","_font","module","exports"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nvar isArray = require('./helpers').isArray;\r\n\r\nfunction typeName(bold, italics) {\r\n\tvar type = 'normal';\r\n\tif (bold && italics) {\r\n\t\ttype = 'bolditalics';\r\n\t} else if (bold) {\r\n\t\ttype = 'bold';\r\n\t} else if (italics) {\r\n\t\ttype = 'italics';\r\n\t}\r\n\treturn type;\r\n}\r\n\r\nfunction FontProvider(fontDescriptors, pdfKitDoc) {\r\n\tthis.fonts = {};\r\n\tthis.pdfKitDoc = pdfKitDoc;\r\n\tthis.fontCache = {};\r\n\r\n\tfor (var font in fontDescriptors) {\r\n\t\tif (fontDescriptors.hasOwnProperty(font)) {\r\n\t\t\tvar fontDef = fontDescriptors[font];\r\n\r\n\t\t\tthis.fonts[font] = {\r\n\t\t\t\tnormal: fontDef.normal,\r\n\t\t\t\tbold: fontDef.bold,\r\n\t\t\t\titalics: fontDef.italics,\r\n\t\t\t\tbolditalics: fontDef.bolditalics\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n}\r\n\r\nFontProvider.prototype.getFontType = function (bold, italics) {\r\n\treturn typeName(bold, italics);\r\n}\r\n\r\nFontProvider.prototype.getFontFile = function (familyName, bold, italics) {\r\n\tvar type = this.getFontType(bold, italics);\r\n\tif (!this.fonts[familyName] || !this.fonts[familyName][type]) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\treturn this.fonts[familyName][type];\r\n}\r\n\r\nFontProvider.prototype.provideFont = function (familyName, bold, italics) {\r\n\tvar type = this.getFontType(bold, italics);\r\n\tif (this.getFontFile(familyName, bold, italics) === null) {\r\n\t\tthrow new Error('Font \\'' + familyName + '\\' in style \\'' + type + '\\' is not defined in the font section of the document definition.');\r\n\t}\r\n\r\n\tthis.fontCache[familyName] = this.fontCache[familyName] || {};\r\n\r\n\tif (!this.fontCache[familyName][type]) {\r\n\t\tvar def = this.fonts[familyName][type];\r\n\t\tif (!isArray(def)) {\r\n\t\t\tdef = [def];\r\n\t\t}\r\n\t\tthis.fontCache[familyName][type] = this.pdfKitDoc.font.apply(this.pdfKitDoc, def)._font;\r\n\t}\r\n\r\n\treturn this.fontCache[familyName][type];\r\n};\r\n\r\nmodule.exports = FontProvider;\r\n"]},"metadata":{},"sourceType":"script"}