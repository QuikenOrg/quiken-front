{"ast":null,"code":"'use strict';\n/**\n * Dependencies\n */\n\nconst EmailAddress = require('./email-address');\n\nconst Personalization = require('./personalization');\n\nconst toCamelCase = require('../helpers/to-camel-case');\n\nconst toSnakeCase = require('../helpers/to-snake-case');\n\nconst deepClone = require('../helpers/deep-clone');\n\nconst arrayToJSON = require('../helpers/array-to-json');\n\nconst {\n  DYNAMIC_TEMPLATE_CHAR_WARNING\n} = require('../constants');\n\nconst {\n  validateMailSettings,\n  validateTrackingSettings\n} = require('../helpers/validate-settings');\n/**\n * Mail class\n */\n\n\nclass Mail {\n  /**\n   * Constructor\n   */\n  constructor(data) {\n    //Initialize array and object properties\n    this.isDynamic = false;\n    this.hideWarnings = false;\n    this.personalizations = [];\n    this.attachments = [];\n    this.content = [];\n    this.categories = [];\n    this.headers = {};\n    this.sections = {};\n    this.customArgs = {};\n    this.trackingSettings = {};\n    this.mailSettings = {};\n    this.asm = {}; //Helper properties\n\n    this.substitutions = null;\n    this.substitutionWrappers = null;\n    this.dynamicTemplateData = null; //Process data if given\n\n    if (data) {\n      this.fromData(data);\n    }\n  }\n  /**\n   * Build from data\n   */\n\n\n  fromData(data) {\n    //Expecting object\n    if (typeof data !== 'object') {\n      throw new Error('Expecting object for Mail data');\n    } //Convert to camel case to make it workable, making a copy to prevent\n    //changes to the original objects\n\n\n    data = deepClone(data);\n    data = toCamelCase(data, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers', 'sections']); //Extract properties from data\n\n    const {\n      to,\n      from,\n      replyTo,\n      cc,\n      bcc,\n      sendAt,\n      subject,\n      text,\n      html,\n      content,\n      templateId,\n      personalizations,\n      attachments,\n      ipPoolName,\n      batchId,\n      sections,\n      headers,\n      categories,\n      category,\n      customArgs,\n      asm,\n      mailSettings,\n      trackingSettings,\n      substitutions,\n      substitutionWrappers,\n      dynamicTemplateData,\n      isMultiple,\n      hideWarnings\n    } = data; //Set data\n\n    this.setFrom(from);\n    this.setReplyTo(replyTo);\n    this.setSubject(subject);\n    this.setSendAt(sendAt);\n    this.setTemplateId(templateId);\n    this.setBatchId(batchId);\n    this.setIpPoolName(ipPoolName);\n    this.setAttachments(attachments);\n    this.setContent(content);\n    this.setSections(sections);\n    this.setHeaders(headers);\n    this.setCategories(category);\n    this.setCategories(categories);\n    this.setCustomArgs(customArgs);\n    this.setAsm(asm);\n    this.setMailSettings(mailSettings);\n    this.setTrackingSettings(trackingSettings);\n    this.setHideWarnings(hideWarnings);\n\n    if (this.isDynamic) {\n      this.setDynamicTemplateData(dynamicTemplateData);\n    } else {\n      this.setSubstitutions(substitutions);\n      this.setSubstitutionWrappers(substitutionWrappers);\n    } //Add contents from text/html properties\n\n\n    this.addTextContent(text);\n    this.addHtmlContent(html); //Using \"to\" property for personalizations\n\n    if (personalizations) {\n      this.setPersonalizations(personalizations);\n    } else if (isMultiple && Array.isArray(to)) {\n      //Multiple individual emails\n      to.forEach(to => this.addTo(to, cc, bcc));\n    } else {\n      //Single email (possibly with multiple recipients in the to field)\n      this.addTo(to, cc, bcc);\n    }\n  }\n  /**\n   * Set from email\n   */\n\n\n  setFrom(from) {\n    if (this._checkProperty('from', from, [this._checkUndefined])) {\n      if (typeof from !== 'string' && typeof from.email !== 'string') {\n        throw new Error('String or address object expected for `from`');\n      }\n\n      this.from = EmailAddress.create(from);\n    }\n  }\n  /**\n   * Set reply to\n   */\n\n\n  setReplyTo(replyTo) {\n    if (this._checkProperty('replyTo', replyTo, [this._checkUndefined])) {\n      if (typeof replyTo !== 'string' && typeof replyTo.email !== 'string') {\n        throw new Error('String or address object expected for `replyTo`');\n      }\n\n      this.replyTo = EmailAddress.create(replyTo);\n    }\n  }\n  /**\n   * Set subject\n   */\n\n\n  setSubject(subject) {\n    this._setProperty('subject', subject, 'string');\n  }\n  /**\n   * Set send at\n   */\n\n\n  setSendAt(sendAt) {\n    if (this._checkProperty('sendAt', sendAt, [this._checkUndefined, this._createCheckThatThrows(Number.isInteger, 'Integer expected for `sendAt`')])) {\n      this.sendAt = sendAt;\n    }\n  }\n  /**\n   * Set template ID, also checks if the template is dynamic or legacy\n   */\n\n\n  setTemplateId(templateId) {\n    if (this._setProperty('templateId', templateId, 'string')) {\n      if (templateId.indexOf('d-') === 0) {\n        this.isDynamic = true;\n      }\n    }\n  }\n  /**\n   * Set batch ID\n   */\n\n\n  setBatchId(batchId) {\n    this._setProperty('batchId', batchId, 'string');\n  }\n  /**\n   * Set IP pool name\n   */\n\n\n  setIpPoolName(ipPoolName) {\n    this._setProperty('ipPoolName', ipPoolName, 'string');\n  }\n  /**\n   * Set ASM\n   */\n\n\n  setAsm(asm) {\n    if (this._checkProperty('asm', asm, [this._checkUndefined, this._createTypeCheck('object')])) {\n      if (typeof asm.groupId !== 'number') {\n        throw new Error('Expected `asm` to include an integer in its `groupId` field');\n      }\n\n      if (asm.groupsToDisplay && (!Array.isArray(asm.groupsToDisplay) || !asm.groupsToDisplay.every(group => typeof group === 'number'))) {\n        throw new Error('Array of integers expected for `asm.groupsToDisplay`');\n      }\n\n      this.asm = asm;\n    }\n  }\n  /**\n   * Set personalizations\n   */\n\n\n  setPersonalizations(personalizations) {\n    if (!this._doArrayCheck('personalizations', personalizations)) {\n      return;\n    }\n\n    if (!personalizations.every(personalization => typeof personalization === 'object')) {\n      throw new Error('Array of objects expected for `personalizations`');\n    } //Clear and use add helper to add one by one\n\n\n    this.personalizations = [];\n    personalizations.forEach(personalization => this.addPersonalization(personalization));\n  }\n  /**\n   * Add personalization\n   */\n\n\n  addPersonalization(personalization) {\n    //We should either send substitutions or dynamicTemplateData\n    //depending on the templateId\n    if (this.isDynamic && personalization.substitutions) {\n      delete personalization.substitutions;\n    } else if (!this.isDynamic && personalization.dynamicTemplateData) {\n      delete personalization.dynamicTemplateData;\n    } //Convert to class if needed\n\n\n    if (!(personalization instanceof Personalization)) {\n      personalization = new Personalization(personalization);\n    } //If this is dynamic, set dynamicTemplateData, or set substitutions\n\n\n    if (this.isDynamic) {\n      this.applyDynamicTemplateData(personalization);\n    } else {\n      this.applySubstitutions(personalization);\n    } //Push personalization to array\n\n\n    this.personalizations.push(personalization);\n  }\n  /**\n   * Convenience method for quickly creating personalizations\n   */\n\n\n  addTo(to, cc, bcc) {\n    if (typeof to === 'undefined' && typeof cc === 'undefined' && typeof bcc === 'undefined') {\n      throw new Error('Provide at least one of to, cc or bcc');\n    }\n\n    this.addPersonalization(new Personalization({\n      to,\n      cc,\n      bcc\n    }));\n  }\n  /**\n   * Set substitutions\n   */\n\n\n  setSubstitutions(substitutions) {\n    this._setProperty('substitutions', substitutions, 'object');\n  }\n  /**\n   * Set substitution wrappers\n   */\n\n\n  setSubstitutionWrappers(substitutionWrappers) {\n    let lengthCheck = (propertyName, value) => {\n      if (!Array.isArray(value) || value.length !== 2) {\n        throw new Error('Array expected with two elements for `' + propertyName + '`');\n      }\n    };\n\n    if (this._checkProperty('substitutionWrappers', substitutionWrappers, [this._checkUndefined, lengthCheck])) {\n      this.substitutionWrappers = substitutionWrappers;\n    }\n  }\n  /**\n   * Helper which applies globally set substitutions to personalizations\n   */\n\n\n  applySubstitutions(personalization) {\n    if (personalization instanceof Personalization) {\n      personalization.reverseMergeSubstitutions(this.substitutions);\n      personalization.setSubstitutionWrappers(this.substitutionWrappers);\n    }\n  }\n  /**\n   * Helper which applies globally set dynamic_template_data to personalizations\n   */\n\n\n  applyDynamicTemplateData(personalization) {\n    if (personalization instanceof Personalization) {\n      personalization.deepMergeDynamicTemplateData(this.dynamicTemplateData);\n    }\n  }\n  /**\n   * Set dynamicTemplateData\n   */\n\n\n  setDynamicTemplateData(dynamicTemplateData) {\n    if (typeof dynamicTemplateData === 'undefined') {\n      return;\n    }\n\n    if (typeof dynamicTemplateData !== 'object') {\n      throw new Error('Object expected for `dynamicTemplateData`');\n    } // Check dynamic template for non-escaped characters and warn if found\n\n\n    if (!this.hideWarnings) {\n      Object.values(dynamicTemplateData).forEach(value => {\n        if (/['\"&]/.test(value)) {\n          console.warn(DYNAMIC_TEMPLATE_CHAR_WARNING);\n        }\n      });\n    }\n\n    this.dynamicTemplateData = dynamicTemplateData;\n  }\n  /**\n   * Set content\n   */\n\n\n  setContent(content) {\n    if (this._doArrayCheck('content', content)) {\n      if (!content.every(contentField => typeof contentField === 'object')) {\n        throw new Error('Expected each entry in `content` to be an object');\n      }\n\n      if (!content.every(contentField => typeof contentField.type === 'string')) {\n        throw new Error('Expected each `content` entry to contain a `type` string');\n      }\n\n      if (!content.every(contentField => typeof contentField.value === 'string')) {\n        throw new Error('Expected each `content` entry to contain a `value` string');\n      }\n\n      this.content = content;\n    }\n  }\n  /**\n   * Add content\n   */\n\n\n  addContent(content) {\n    if (this._checkProperty('content', content, [this._createTypeCheck('object')])) {\n      this.content.push(content);\n    }\n  }\n  /**\n   * Add text content\n   */\n\n\n  addTextContent(text) {\n    if (this._checkProperty('text', text, [this._checkUndefined, this._createTypeCheck('string')])) {\n      this.addContent({\n        value: text,\n        type: 'text/plain'\n      });\n    }\n  }\n  /**\n   * Add HTML content\n   */\n\n\n  addHtmlContent(html) {\n    if (this._checkProperty('html', html, [this._checkUndefined, this._createTypeCheck('string')])) {\n      this.addContent({\n        value: html,\n        type: 'text/html'\n      });\n    }\n  }\n  /**\n   * Set attachments\n   */\n\n\n  setAttachments(attachments) {\n    if (this._doArrayCheck('attachments', attachments)) {\n      if (!attachments.every(attachment => typeof attachment.content === 'string')) {\n        throw new Error('Expected each attachment to contain a `content` string');\n      }\n\n      if (!attachments.every(attachment => typeof attachment.filename === 'string')) {\n        throw new Error('Expected each attachment to contain a `filename` string');\n      }\n\n      if (!attachments.every(attachment => !attachment.type || typeof attachment.type === 'string')) {\n        throw new Error('Expected the attachment\\'s `type` field to be a string');\n      }\n\n      if (!attachments.every(attachment => !attachment.disposition || typeof attachment.disposition === 'string')) {\n        throw new Error('Expected the attachment\\'s `disposition` field to be a string');\n      }\n\n      this.attachments = attachments;\n    }\n  }\n  /**\n   * Add attachment\n   */\n\n\n  addAttachment(attachment) {\n    if (this._checkProperty('attachment', attachment, [this._checkUndefined, this._createTypeCheck('object')])) {\n      this.attachments.push(attachment);\n    }\n  }\n  /**\n   * Set categories\n   */\n\n\n  setCategories(categories) {\n    let allElementsAreStrings = (propertyName, value) => {\n      if (!Array.isArray(value) || !value.every(item => typeof item === 'string')) {\n        throw new Error('Array of strings expected for `' + propertyName + '`');\n      }\n    };\n\n    if (typeof categories === 'string') {\n      categories = [categories];\n    }\n\n    if (this._checkProperty('categories', categories, [this._checkUndefined, allElementsAreStrings])) {\n      this.categories = categories;\n    }\n  }\n  /**\n   * Add category\n   */\n\n\n  addCategory(category) {\n    if (this._checkProperty('category', category, [this._createTypeCheck('string')])) {\n      this.categories.push(category);\n    }\n  }\n  /**\n   * Set headers\n   */\n\n\n  setHeaders(headers) {\n    this._setProperty('headers', headers, 'object');\n  }\n  /**\n   * Add a header\n   */\n\n\n  addHeader(key, value) {\n    if (this._checkProperty('key', key, [this._createTypeCheck('string')]) && this._checkProperty('value', value, [this._createTypeCheck('string')])) {\n      this.headers[key] = value;\n    }\n  }\n  /**\n   * Set sections\n   */\n\n\n  setSections(sections) {\n    this._setProperty('sections', sections, 'object');\n  }\n  /**\n   * Set custom args\n   */\n\n\n  setCustomArgs(customArgs) {\n    this._setProperty('customArgs', customArgs, 'object');\n  }\n  /**\n   * Set tracking settings\n   */\n\n\n  setTrackingSettings(settings) {\n    if (typeof settings === 'undefined') {\n      return;\n    }\n\n    validateTrackingSettings(settings);\n    this.trackingSettings = settings;\n  }\n  /**\n   * Set mail settings\n   */\n\n\n  setMailSettings(settings) {\n    if (typeof settings === 'undefined') {\n      return;\n    }\n\n    validateMailSettings(settings);\n    this.mailSettings = settings;\n  }\n  /**\n   * Set hide warnings\n   */\n\n\n  setHideWarnings(hide) {\n    if (typeof hide === 'undefined') {\n      return;\n    }\n\n    if (typeof hide !== 'boolean') {\n      throw new Error('Boolean expected for `hideWarnings`');\n    }\n\n    this.hideWarnings = hide;\n  }\n  /**\n   * To JSON\n   */\n\n\n  toJSON() {\n    //Extract properties from self\n    const {\n      from,\n      replyTo,\n      sendAt,\n      subject,\n      content,\n      templateId,\n      personalizations,\n      attachments,\n      ipPoolName,\n      batchId,\n      asm,\n      sections,\n      headers,\n      categories,\n      customArgs,\n      mailSettings,\n      trackingSettings\n    } = this; //Initialize with mandatory values\n\n    const json = {\n      from,\n      subject,\n      personalizations: arrayToJSON(personalizations)\n    }; //Array properties\n\n    if (Array.isArray(attachments) && attachments.length > 0) {\n      json.attachments = arrayToJSON(attachments);\n    }\n\n    if (Array.isArray(categories) && categories.length > 0) {\n      json.categories = categories.filter(cat => cat !== '');\n    }\n\n    if (Array.isArray(content) && content.length > 0) {\n      json.content = arrayToJSON(content);\n    } //Object properties\n\n\n    if (Object.keys(headers).length > 0) {\n      json.headers = headers;\n    }\n\n    if (Object.keys(mailSettings).length > 0) {\n      json.mailSettings = mailSettings;\n    }\n\n    if (Object.keys(trackingSettings).length > 0) {\n      json.trackingSettings = trackingSettings;\n    }\n\n    if (Object.keys(customArgs).length > 0) {\n      json.customArgs = customArgs;\n    }\n\n    if (Object.keys(sections).length > 0) {\n      json.sections = sections;\n    }\n\n    if (Object.keys(asm).length > 0) {\n      json.asm = asm;\n    } //Simple properties\n\n\n    if (typeof replyTo !== 'undefined') {\n      json.replyTo = replyTo;\n    }\n\n    if (typeof sendAt !== 'undefined') {\n      json.sendAt = sendAt;\n    }\n\n    if (typeof batchId !== 'undefined') {\n      json.batchId = batchId;\n    }\n\n    if (typeof templateId !== 'undefined') {\n      json.templateId = templateId;\n    }\n\n    if (typeof ipPoolName !== 'undefined') {\n      json.ipPoolName = ipPoolName;\n    } //Return as snake cased object\n\n\n    return toSnakeCase(json, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers', 'sections']);\n  }\n  /**************************************************************************\n   * Static helpers\n   ***/\n\n  /**\n   * Create a Mail instance from given data\n   */\n\n\n  static create(data) {\n    //Array?\n    if (Array.isArray(data)) {\n      return data.filter(item => !!item).map(item => this.create(item));\n    } //Already instance of Mail class?\n\n\n    if (data instanceof Mail) {\n      return data;\n    } //Create instance\n\n\n    return new Mail(data);\n  }\n  /**************************************************************************\n   * helpers for property-setting checks\n   ***/\n\n  /**\n   * Perform a set of checks on the new property value. Returns true if all\n   * checks complete successfully without throwing errors or returning true.\n   */\n\n\n  _checkProperty(propertyName, value, checks) {\n    return !checks.some(e => e(propertyName, value));\n  }\n  /**\n   * Set a property with normal undefined and type-checks\n   */\n\n\n  _setProperty(propertyName, value, propertyType) {\n    let propertyChecksPassed = this._checkProperty(propertyName, value, [this._checkUndefined, this._createTypeCheck(propertyType)]);\n\n    if (propertyChecksPassed) {\n      this[propertyName] = value;\n    }\n\n    return propertyChecksPassed;\n  }\n  /**\n   * Fail if the value is undefined.\n   */\n\n\n  _checkUndefined(propertyName, value) {\n    return typeof value === 'undefined';\n  }\n  /**\n   * Create and return a function that checks for a given type\n   */\n\n\n  _createTypeCheck(propertyType) {\n    return (propertyName, value) => {\n      if (typeof value !== propertyType) {\n        throw new Error(propertyType + ' expected for `' + propertyName + '`');\n      }\n    };\n  }\n  /**\n   * Create a check out of a callback. If the callback\n   * returns false, the check will throw an error.\n   */\n\n\n  _createCheckThatThrows(check, errorString) {\n    return (propertyName, value) => {\n      if (!check(value)) {\n        throw new Error(errorString);\n      }\n    };\n  }\n  /**\n   * Set an array property after checking that the new value is an\n   * array.\n   */\n\n\n  _setArrayProperty(propertyName, value) {\n    if (this._doArrayCheck(propertyName, value)) {\n      this[propertyName] = value;\n    }\n  }\n  /**\n   * Check that a value isn't undefined and is an array.\n   */\n\n\n  _doArrayCheck(propertyName, value) {\n    return this._checkProperty(propertyName, value, [this._checkUndefined, this._createCheckThatThrows(Array.isArray, 'Array expected for`' + propertyName + '`')]);\n  }\n\n} //Export class\n\n\nmodule.exports = Mail;","map":{"version":3,"sources":["/home/julianallende/Desktop/Coding/proyectos/master_quiken/proyecto_sapo/client/node_modules/@sendgrid/helpers/classes/mail.js"],"names":["EmailAddress","require","Personalization","toCamelCase","toSnakeCase","deepClone","arrayToJSON","DYNAMIC_TEMPLATE_CHAR_WARNING","validateMailSettings","validateTrackingSettings","Mail","constructor","data","isDynamic","hideWarnings","personalizations","attachments","content","categories","headers","sections","customArgs","trackingSettings","mailSettings","asm","substitutions","substitutionWrappers","dynamicTemplateData","fromData","Error","to","from","replyTo","cc","bcc","sendAt","subject","text","html","templateId","ipPoolName","batchId","category","isMultiple","setFrom","setReplyTo","setSubject","setSendAt","setTemplateId","setBatchId","setIpPoolName","setAttachments","setContent","setSections","setHeaders","setCategories","setCustomArgs","setAsm","setMailSettings","setTrackingSettings","setHideWarnings","setDynamicTemplateData","setSubstitutions","setSubstitutionWrappers","addTextContent","addHtmlContent","setPersonalizations","Array","isArray","forEach","addTo","_checkProperty","_checkUndefined","email","create","_setProperty","_createCheckThatThrows","Number","isInteger","indexOf","_createTypeCheck","groupId","groupsToDisplay","every","group","_doArrayCheck","personalization","addPersonalization","applyDynamicTemplateData","applySubstitutions","push","lengthCheck","propertyName","value","length","reverseMergeSubstitutions","deepMergeDynamicTemplateData","Object","values","test","console","warn","contentField","type","addContent","attachment","filename","disposition","addAttachment","allElementsAreStrings","item","addCategory","addHeader","key","settings","hide","toJSON","json","filter","cat","keys","map","checks","some","e","propertyType","propertyChecksPassed","check","errorString","_setArrayProperty","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/**\n * Dependencies\n */\nconst EmailAddress = require('./email-address');\nconst Personalization = require('./personalization');\nconst toCamelCase = require('../helpers/to-camel-case');\nconst toSnakeCase = require('../helpers/to-snake-case');\nconst deepClone = require('../helpers/deep-clone');\nconst arrayToJSON = require('../helpers/array-to-json');\nconst { DYNAMIC_TEMPLATE_CHAR_WARNING } = require('../constants');\nconst {validateMailSettings, validateTrackingSettings} = require('../helpers/validate-settings');\n\n/**\n * Mail class\n */\nclass Mail {\n\n  /**\n   * Constructor\n   */\n  constructor(data) {\n\n    //Initialize array and object properties\n    this.isDynamic = false;\n    this.hideWarnings = false;\n    this.personalizations = [];\n    this.attachments = [];\n    this.content = [];\n    this.categories = [];\n    this.headers = {};\n    this.sections = {};\n    this.customArgs = {};\n    this.trackingSettings = {};\n    this.mailSettings = {};\n    this.asm = {};\n\n    //Helper properties\n    this.substitutions = null;\n    this.substitutionWrappers = null;\n    this.dynamicTemplateData = null;\n\n    //Process data if given\n    if (data) {\n      this.fromData(data);\n    }\n  }\n\n  /**\n   * Build from data\n   */\n  fromData(data) {\n\n    //Expecting object\n    if (typeof data !== 'object') {\n      throw new Error('Expecting object for Mail data');\n    }\n\n    //Convert to camel case to make it workable, making a copy to prevent\n    //changes to the original objects\n    data = deepClone(data);\n    data = toCamelCase(data, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers', 'sections']);\n\n    //Extract properties from data\n    const {\n      to, from, replyTo, cc, bcc, sendAt, subject, text, html, content,\n      templateId, personalizations, attachments, ipPoolName, batchId,\n      sections, headers, categories, category, customArgs, asm, mailSettings,\n      trackingSettings, substitutions, substitutionWrappers, dynamicTemplateData, isMultiple,\n      hideWarnings,\n    } = data;\n\n    //Set data\n    this.setFrom(from);\n    this.setReplyTo(replyTo);\n    this.setSubject(subject);\n    this.setSendAt(sendAt);\n    this.setTemplateId(templateId);\n    this.setBatchId(batchId);\n    this.setIpPoolName(ipPoolName);\n    this.setAttachments(attachments);\n    this.setContent(content);\n    this.setSections(sections);\n    this.setHeaders(headers);\n    this.setCategories(category);\n    this.setCategories(categories);\n    this.setCustomArgs(customArgs);\n    this.setAsm(asm);\n    this.setMailSettings(mailSettings);\n    this.setTrackingSettings(trackingSettings);\n    this.setHideWarnings(hideWarnings);\n\n    if (this.isDynamic) {\n      this.setDynamicTemplateData(dynamicTemplateData);\n    } else {\n      this.setSubstitutions(substitutions);\n      this.setSubstitutionWrappers(substitutionWrappers);\n    }\n\n    //Add contents from text/html properties\n    this.addTextContent(text);\n    this.addHtmlContent(html);\n\n    //Using \"to\" property for personalizations\n    if (personalizations) {\n      this.setPersonalizations(personalizations);\n    } else if (isMultiple && Array.isArray(to)) {\n      //Multiple individual emails\n      to.forEach(to => this.addTo(to, cc, bcc));\n    } else {\n      //Single email (possibly with multiple recipients in the to field)\n      this.addTo(to, cc, bcc);\n    }\n  }\n\n  /**\n   * Set from email\n   */\n  setFrom(from) {\n    if (this._checkProperty('from', from, [this._checkUndefined])) {\n      if (typeof from !== 'string' && typeof from.email !== 'string') {\n        throw new Error('String or address object expected for `from`');\n      }\n      this.from = EmailAddress.create(from);\n    }\n  }\n\n  /**\n   * Set reply to\n   */\n  setReplyTo(replyTo) {\n    if (this._checkProperty('replyTo', replyTo, [this._checkUndefined])) {\n      if (typeof replyTo !== 'string' && typeof replyTo.email !== 'string') {\n        throw new Error('String or address object expected for `replyTo`');\n      }\n      this.replyTo = EmailAddress.create(replyTo);\n    }\n  }\n\n  /**\n   * Set subject\n   */\n  setSubject(subject) {\n    this._setProperty('subject', subject, 'string');\n  }\n\n  /**\n   * Set send at\n   */\n  setSendAt(sendAt) {\n    if (this._checkProperty('sendAt', sendAt, [this._checkUndefined, this._createCheckThatThrows(Number.isInteger, 'Integer expected for `sendAt`')])) {\n      this.sendAt = sendAt;\n    }\n  }\n\n  /**\n   * Set template ID, also checks if the template is dynamic or legacy\n   */\n  setTemplateId(templateId) {\n    if (this._setProperty('templateId', templateId, 'string')) {\n      if (templateId.indexOf('d-') === 0) {\n        this.isDynamic = true;\n      }\n    }\n  }\n\n  /**\n   * Set batch ID\n   */\n  setBatchId(batchId) {\n    this._setProperty('batchId', batchId, 'string');\n  }\n\n  /**\n   * Set IP pool name\n   */\n  setIpPoolName(ipPoolName) {\n    this._setProperty('ipPoolName', ipPoolName, 'string');\n  }\n\n  /**\n   * Set ASM\n   */\n  setAsm(asm) {\n    if (this._checkProperty('asm', asm, [this._checkUndefined, this._createTypeCheck('object')])) {\n      if (typeof asm.groupId !== 'number') {\n        throw new Error('Expected `asm` to include an integer in its `groupId` field');\n      }\n      if (asm.groupsToDisplay &&\n        (!Array.isArray(asm.groupsToDisplay) || !asm.groupsToDisplay.every(group => typeof group === 'number'))) {\n        throw new Error('Array of integers expected for `asm.groupsToDisplay`');\n      }\n      this.asm = asm;\n    }\n  }\n\n  /**\n   * Set personalizations\n   */\n  setPersonalizations(personalizations) {\n    if (!this._doArrayCheck('personalizations', personalizations)) {\n      return;\n    }\n\n    if (!personalizations.every(personalization => typeof personalization === 'object')) {\n      throw new Error('Array of objects expected for `personalizations`');\n    }\n\n    //Clear and use add helper to add one by one\n    this.personalizations = [];\n    personalizations\n      .forEach(personalization => this.addPersonalization(personalization));\n  }\n\n  /**\n   * Add personalization\n   */\n  addPersonalization(personalization) {\n    //We should either send substitutions or dynamicTemplateData\n    //depending on the templateId\n    if (this.isDynamic && personalization.substitutions) {\n      delete personalization.substitutions;\n    } else if (!this.isDynamic && personalization.dynamicTemplateData) {\n      delete personalization.dynamicTemplateData;\n    }\n\n    //Convert to class if needed\n    if (!(personalization instanceof Personalization)) {\n      personalization = new Personalization(personalization);\n    }\n\n    //If this is dynamic, set dynamicTemplateData, or set substitutions\n    if (this.isDynamic) {\n      this.applyDynamicTemplateData(personalization);\n    } else {\n      this.applySubstitutions(personalization);\n    }\n\n    //Push personalization to array\n    this.personalizations.push(personalization);\n  }\n\n  /**\n   * Convenience method for quickly creating personalizations\n   */\n  addTo(to, cc, bcc) {\n    if (\n      typeof to === 'undefined' &&\n      typeof cc === 'undefined' &&\n      typeof bcc === 'undefined'\n    ) {\n      throw new Error('Provide at least one of to, cc or bcc');\n    }\n    this.addPersonalization(new Personalization({to, cc, bcc}));\n  }\n\n  /**\n   * Set substitutions\n   */\n  setSubstitutions(substitutions) {\n    this._setProperty('substitutions', substitutions, 'object');\n  }\n\n  /**\n   * Set substitution wrappers\n   */\n  setSubstitutionWrappers(substitutionWrappers) {\n    let lengthCheck = (propertyName, value) => {\n      if (!Array.isArray(value) || value.length !== 2) {\n        throw new Error('Array expected with two elements for `' + propertyName + '`');\n      }\n    };\n\n    if (this._checkProperty('substitutionWrappers', substitutionWrappers, [this._checkUndefined, lengthCheck])) {\n      this.substitutionWrappers = substitutionWrappers;\n    }\n  }\n\n  /**\n   * Helper which applies globally set substitutions to personalizations\n   */\n  applySubstitutions(personalization) {\n    if (personalization instanceof Personalization) {\n      personalization.reverseMergeSubstitutions(this.substitutions);\n      personalization.setSubstitutionWrappers(this.substitutionWrappers);\n    }\n  }\n\n  /**\n   * Helper which applies globally set dynamic_template_data to personalizations\n   */\n  applyDynamicTemplateData(personalization) {\n    if (personalization instanceof Personalization) {\n      personalization.deepMergeDynamicTemplateData(this.dynamicTemplateData);\n    }\n  }\n\n  /**\n   * Set dynamicTemplateData\n   */\n  setDynamicTemplateData(dynamicTemplateData) {\n    if (typeof dynamicTemplateData === 'undefined') {\n      return;\n    }\n    if (typeof dynamicTemplateData !== 'object') {\n      throw new Error('Object expected for `dynamicTemplateData`');\n    }\n\n    // Check dynamic template for non-escaped characters and warn if found\n    if (!this.hideWarnings) {\n      Object.values(dynamicTemplateData).forEach(value => {\n        if (/['\"&]/.test(value)) {\n          console.warn(DYNAMIC_TEMPLATE_CHAR_WARNING);\n        }\n      });\n    }\n\n    this.dynamicTemplateData = dynamicTemplateData;\n  }\n\n  /**\n   * Set content\n   */\n  setContent(content) {\n    if (this._doArrayCheck('content', content)) {\n      if (!content.every(contentField => typeof contentField === 'object')) {\n        throw new Error('Expected each entry in `content` to be an object');\n      }\n      if (!content.every(contentField => typeof contentField.type === 'string')) {\n        throw new Error('Expected each `content` entry to contain a `type` string');\n      }\n      if (!content.every(contentField => typeof contentField.value === 'string')) {\n        throw new Error('Expected each `content` entry to contain a `value` string');\n      }\n      this.content = content;\n    }\n  }\n\n  /**\n   * Add content\n   */\n  addContent(content) {\n    if (this._checkProperty('content', content, [this._createTypeCheck('object')])) {\n      this.content.push(content);\n    }\n  }\n\n  /**\n   * Add text content\n   */\n  addTextContent(text) {\n    if (this._checkProperty('text', text, [this._checkUndefined, this._createTypeCheck('string')])) {\n      this.addContent({\n        value: text,\n        type: 'text/plain',\n      });\n    }\n  }\n\n  /**\n   * Add HTML content\n   */\n  addHtmlContent(html) {\n    if (this._checkProperty('html', html, [this._checkUndefined, this._createTypeCheck('string')])) {\n      this.addContent({\n        value: html,\n        type: 'text/html',\n      });\n    }\n  }\n\n  /**\n   * Set attachments\n   */\n  setAttachments(attachments) {\n    if (this._doArrayCheck('attachments', attachments)) {\n      if (!attachments.every(attachment => typeof attachment.content === 'string')) {\n        throw new Error('Expected each attachment to contain a `content` string');\n      }\n      if (!attachments.every(attachment => typeof attachment.filename === 'string')) {\n        throw new Error('Expected each attachment to contain a `filename` string');\n      }\n      if (!attachments.every(attachment => !attachment.type || typeof attachment.type === 'string')) {\n        throw new Error('Expected the attachment\\'s `type` field to be a string');\n      }\n      if (!attachments.every(attachment => !attachment.disposition || typeof attachment.disposition === 'string')) {\n        throw new Error('Expected the attachment\\'s `disposition` field to be a string');\n      }\n      this.attachments = attachments;\n    }\n  }\n\n  /**\n   * Add attachment\n   */\n  addAttachment(attachment) {\n    if (this._checkProperty('attachment', attachment, [this._checkUndefined, this._createTypeCheck('object')])) {\n      this.attachments.push(attachment);\n    }\n  }\n\n  /**\n   * Set categories\n   */\n  setCategories(categories) {\n    let allElementsAreStrings = (propertyName, value) => {\n      if (!Array.isArray(value) || !value.every(item => typeof item === 'string')) {\n        throw new Error('Array of strings expected for `' + propertyName + '`');\n      }\n    };\n\n    if (typeof categories === 'string') {\n      categories = [categories];\n    }\n\n    if (this._checkProperty('categories', categories, [this._checkUndefined, allElementsAreStrings])) {\n      this.categories = categories;\n    }\n  }\n\n  /**\n   * Add category\n   */\n  addCategory(category) {\n    if (this._checkProperty('category', category, [this._createTypeCheck('string')])) {\n      this.categories.push(category);\n    }\n  }\n\n  /**\n   * Set headers\n   */\n  setHeaders(headers) {\n    this._setProperty('headers', headers, 'object');\n  }\n\n  /**\n   * Add a header\n   */\n  addHeader(key, value) {\n    if (this._checkProperty('key', key, [this._createTypeCheck('string')])\n      && this._checkProperty('value', value, [this._createTypeCheck('string')])) {\n      this.headers[key] = value;\n    }\n  }\n\n  /**\n   * Set sections\n   */\n  setSections(sections) {\n    this._setProperty('sections', sections, 'object');\n  }\n\n  /**\n   * Set custom args\n   */\n  setCustomArgs(customArgs) {\n    this._setProperty('customArgs', customArgs, 'object');\n  }\n\n  /**\n   * Set tracking settings\n   */\n  setTrackingSettings(settings) {\n    if (typeof settings === 'undefined') {\n      return;\n    }\n    validateTrackingSettings(settings);\n    this.trackingSettings = settings;\n  }\n\n  /**\n   * Set mail settings\n   */\n  setMailSettings(settings) {\n    if (typeof settings === 'undefined') {\n      return;\n    }\n    validateMailSettings(settings);\n    this.mailSettings = settings;\n  }\n\n  /**\n   * Set hide warnings\n   */\n  setHideWarnings(hide) {\n    if (typeof hide === 'undefined') {\n      return;\n    }\n    if (typeof hide !== 'boolean') {\n      throw new Error('Boolean expected for `hideWarnings`');\n    }\n    this.hideWarnings = hide;\n  }\n\n  /**\n   * To JSON\n   */\n  toJSON() {\n\n    //Extract properties from self\n    const {\n      from, replyTo, sendAt, subject, content, templateId,\n      personalizations, attachments, ipPoolName, batchId, asm,\n      sections, headers, categories, customArgs, mailSettings,\n      trackingSettings,\n    } = this;\n\n    //Initialize with mandatory values\n    const json = {\n      from, subject,\n      personalizations: arrayToJSON(personalizations),\n    };\n\n    //Array properties\n    if (Array.isArray(attachments) && attachments.length > 0) {\n      json.attachments = arrayToJSON(attachments);\n    }\n    if (Array.isArray(categories) && categories.length > 0) {\n      json.categories = categories.filter(cat => cat !== '');\n    }\n    if (Array.isArray(content) && content.length > 0) {\n      json.content = arrayToJSON(content);\n    }\n\n    //Object properties\n    if (Object.keys(headers).length > 0) {\n      json.headers = headers;\n    }\n    if (Object.keys(mailSettings).length > 0) {\n      json.mailSettings = mailSettings;\n    }\n    if (Object.keys(trackingSettings).length > 0) {\n      json.trackingSettings = trackingSettings;\n    }\n    if (Object.keys(customArgs).length > 0) {\n      json.customArgs = customArgs;\n    }\n    if (Object.keys(sections).length > 0) {\n      json.sections = sections;\n    }\n    if (Object.keys(asm).length > 0) {\n      json.asm = asm;\n    }\n\n    //Simple properties\n    if (typeof replyTo !== 'undefined') {\n      json.replyTo = replyTo;\n    }\n    if (typeof sendAt !== 'undefined') {\n      json.sendAt = sendAt;\n    }\n    if (typeof batchId !== 'undefined') {\n      json.batchId = batchId;\n    }\n    if (typeof templateId !== 'undefined') {\n      json.templateId = templateId;\n    }\n    if (typeof ipPoolName !== 'undefined') {\n      json.ipPoolName = ipPoolName;\n    }\n\n    //Return as snake cased object\n    return toSnakeCase(json, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers', 'sections']);\n  }\n\n  /**************************************************************************\n   * Static helpers\n   ***/\n\n  /**\n   * Create a Mail instance from given data\n   */\n  static create(data) {\n\n    //Array?\n    if (Array.isArray(data)) {\n      return data\n        .filter(item => !!item)\n        .map(item => this.create(item));\n    }\n\n    //Already instance of Mail class?\n    if (data instanceof Mail) {\n      return data;\n    }\n\n    //Create instance\n    return new Mail(data);\n  }\n\n  /**************************************************************************\n   * helpers for property-setting checks\n   ***/\n\n  /**\n   * Perform a set of checks on the new property value. Returns true if all\n   * checks complete successfully without throwing errors or returning true.\n   */\n  _checkProperty(propertyName, value, checks) {\n    return !checks.some((e) => e(propertyName, value));\n  }\n\n  /**\n   * Set a property with normal undefined and type-checks\n   */\n  _setProperty(propertyName, value, propertyType) {\n    let propertyChecksPassed = this._checkProperty(\n      propertyName,\n      value,\n      [this._checkUndefined, this._createTypeCheck(propertyType)]);\n\n    if (propertyChecksPassed) {\n      this[propertyName] = value;\n    }\n\n    return propertyChecksPassed;\n  }\n\n  /**\n   * Fail if the value is undefined.\n   */\n  _checkUndefined(propertyName, value) {\n    return typeof value === 'undefined';\n  }\n\n  /**\n   * Create and return a function that checks for a given type\n   */\n  _createTypeCheck(propertyType) {\n    return (propertyName, value) => {\n      if (typeof value !== propertyType) {\n        throw new Error(propertyType + ' expected for `' + propertyName + '`');\n      }\n    };\n  }\n\n  /**\n   * Create a check out of a callback. If the callback\n   * returns false, the check will throw an error.\n   */\n  _createCheckThatThrows(check, errorString) {\n    return (propertyName, value) => {\n      if (!check(value)) {\n        throw new Error(errorString);\n      }\n    };\n  }\n\n  /**\n   * Set an array property after checking that the new value is an\n   * array.\n   */\n  _setArrayProperty(propertyName, value) {\n    if (this._doArrayCheck(propertyName, value)) {\n      this[propertyName] = value;\n    }\n  }\n\n  /**\n   * Check that a value isn't undefined and is an array.\n   */\n  _doArrayCheck(propertyName, value) {\n    return this._checkProperty(\n      propertyName,\n      value,\n      [this._checkUndefined, this._createCheckThatThrows(Array.isArray, 'Array expected for`' + propertyName + '`')]);\n  }\n}\n\n//Export class\nmodule.exports = Mail;\n"]},"metadata":{},"sourceType":"script"}