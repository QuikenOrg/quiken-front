{"ast":null,"code":"'use strict';\n\nvar fs = require('fs');\n\nfunction ImageMeasure(pdfKitDoc, imageDictionary) {\n  this.pdfKitDoc = pdfKitDoc;\n  this.imageDictionary = imageDictionary || {};\n}\n\nImageMeasure.prototype.measureImage = function (src) {\n  var image;\n  var that = this;\n\n  if (!this.pdfKitDoc._imageRegistry[src]) {\n    try {\n      image = this.pdfKitDoc.openImage(realImageSrc(src));\n\n      if (!image) {\n        throw 'No image';\n      }\n    } catch (error) {\n      throw 'Invalid image: ' + error.toString() + '\\nImages dictionary should contain dataURL entries (or local file paths in node.js)';\n    }\n\n    image.embed(this.pdfKitDoc);\n    this.pdfKitDoc._imageRegistry[src] = image;\n  } else {\n    image = this.pdfKitDoc._imageRegistry[src];\n  }\n\n  return {\n    width: image.width,\n    height: image.height\n  };\n\n  function realImageSrc(src) {\n    var img = that.imageDictionary[src];\n\n    if (!img) {\n      return src;\n    }\n\n    if (fs.existsSync(img)) {\n      return fs.readFileSync(img);\n    }\n\n    var index = img.indexOf('base64,');\n\n    if (index < 0) {\n      return that.imageDictionary[src];\n    }\n\n    return Buffer.from(img.substring(index + 7), 'base64');\n  }\n};\n\nmodule.exports = ImageMeasure;","map":{"version":3,"sources":["/home/julianallende/Desktop/proyecto_sapo/client/node_modules/pdfmake/src/imageMeasure.js"],"names":["fs","require","ImageMeasure","pdfKitDoc","imageDictionary","prototype","measureImage","src","image","that","_imageRegistry","openImage","realImageSrc","error","toString","embed","width","height","img","existsSync","readFileSync","index","indexOf","Buffer","from","substring","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAhB;;AAEA,SAASC,YAAT,CAAsBC,SAAtB,EAAiCC,eAAjC,EAAkD;AACjD,OAAKD,SAAL,GAAiBA,SAAjB;AACA,OAAKC,eAAL,GAAuBA,eAAe,IAAI,EAA1C;AACA;;AAEDF,YAAY,CAACG,SAAb,CAAuBC,YAAvB,GAAsC,UAAUC,GAAV,EAAe;AACpD,MAAIC,KAAJ;AACA,MAAIC,IAAI,GAAG,IAAX;;AAEA,MAAI,CAAC,KAAKN,SAAL,CAAeO,cAAf,CAA8BH,GAA9B,CAAL,EAAyC;AACxC,QAAI;AACHC,MAAAA,KAAK,GAAG,KAAKL,SAAL,CAAeQ,SAAf,CAAyBC,YAAY,CAACL,GAAD,CAArC,CAAR;;AACA,UAAI,CAACC,KAAL,EAAY;AACX,cAAM,UAAN;AACA;AACD,KALD,CAKE,OAAOK,KAAP,EAAc;AACf,YAAM,oBAAoBA,KAAK,CAACC,QAAN,EAApB,GAAuC,qFAA7C;AACA;;AACDN,IAAAA,KAAK,CAACO,KAAN,CAAY,KAAKZ,SAAjB;AACA,SAAKA,SAAL,CAAeO,cAAf,CAA8BH,GAA9B,IAAqCC,KAArC;AACA,GAXD,MAWO;AACNA,IAAAA,KAAK,GAAG,KAAKL,SAAL,CAAeO,cAAf,CAA8BH,GAA9B,CAAR;AACA;;AAED,SAAO;AAAES,IAAAA,KAAK,EAAER,KAAK,CAACQ,KAAf;AAAsBC,IAAAA,MAAM,EAAET,KAAK,CAACS;AAApC,GAAP;;AAEA,WAASL,YAAT,CAAsBL,GAAtB,EAA2B;AAC1B,QAAIW,GAAG,GAAGT,IAAI,CAACL,eAAL,CAAqBG,GAArB,CAAV;;AAEA,QAAI,CAACW,GAAL,EAAU;AACT,aAAOX,GAAP;AACA;;AAED,QAAIP,EAAE,CAACmB,UAAH,CAAcD,GAAd,CAAJ,EAAwB;AACvB,aAAOlB,EAAE,CAACoB,YAAH,CAAgBF,GAAhB,CAAP;AACA;;AAED,QAAIG,KAAK,GAAGH,GAAG,CAACI,OAAJ,CAAY,SAAZ,CAAZ;;AACA,QAAID,KAAK,GAAG,CAAZ,EAAe;AACd,aAAOZ,IAAI,CAACL,eAAL,CAAqBG,GAArB,CAAP;AACA;;AAED,WAAOgB,MAAM,CAACC,IAAP,CAAYN,GAAG,CAACO,SAAJ,CAAcJ,KAAK,GAAG,CAAtB,CAAZ,EAAsC,QAAtC,CAAP;AACA;AACD,CAvCD;;AAyCAK,MAAM,CAACC,OAAP,GAAiBzB,YAAjB","sourcesContent":["'use strict';\r\n\r\nvar fs = require('fs');\r\n\r\nfunction ImageMeasure(pdfKitDoc, imageDictionary) {\r\n\tthis.pdfKitDoc = pdfKitDoc;\r\n\tthis.imageDictionary = imageDictionary || {};\r\n}\r\n\r\nImageMeasure.prototype.measureImage = function (src) {\r\n\tvar image;\r\n\tvar that = this;\r\n\r\n\tif (!this.pdfKitDoc._imageRegistry[src]) {\r\n\t\ttry {\r\n\t\t\timage = this.pdfKitDoc.openImage(realImageSrc(src));\r\n\t\t\tif (!image) {\r\n\t\t\t\tthrow 'No image';\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tthrow 'Invalid image: ' + error.toString() + '\\nImages dictionary should contain dataURL entries (or local file paths in node.js)';\r\n\t\t}\r\n\t\timage.embed(this.pdfKitDoc);\r\n\t\tthis.pdfKitDoc._imageRegistry[src] = image;\r\n\t} else {\r\n\t\timage = this.pdfKitDoc._imageRegistry[src];\r\n\t}\r\n\r\n\treturn { width: image.width, height: image.height };\r\n\r\n\tfunction realImageSrc(src) {\r\n\t\tvar img = that.imageDictionary[src];\r\n\r\n\t\tif (!img) {\r\n\t\t\treturn src;\r\n\t\t}\r\n\r\n\t\tif (fs.existsSync(img)) {\r\n\t\t\treturn fs.readFileSync(img);\r\n\t\t}\r\n\r\n\t\tvar index = img.indexOf('base64,');\r\n\t\tif (index < 0) {\r\n\t\t\treturn that.imageDictionary[src];\r\n\t\t}\r\n\r\n\t\treturn Buffer.from(img.substring(index + 7), 'base64');\r\n\t}\r\n};\r\n\r\nmodule.exports = ImageMeasure;\r\n"]},"metadata":{},"sourceType":"script"}