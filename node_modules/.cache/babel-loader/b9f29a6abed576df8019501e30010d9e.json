{"ast":null,"code":"'use strict';\n\nvar xmldoc = require('xmldoc');\n/** Strip unit postfix, parse number, but return undefined instead of NaN for bad input */\n\n\nfunction stripUnits(textVal) {\n  var n = parseFloat(textVal);\n\n  if (typeof n !== 'number' || isNaN(n)) {\n    return undefined;\n  }\n\n  return n;\n}\n/** Make sure it's valid XML and the root tage is <svg/>, returns xmldoc DOM */\n\n\nfunction parseSVG(svgString) {\n  var doc;\n\n  try {\n    doc = new xmldoc.XmlDocument(svgString);\n  } catch (err) {\n    throw new Error('SVGMeasure: ' + err);\n  }\n\n  if (doc.name !== \"svg\") {\n    throw new Error('SVGMeasure: expected <svg> document');\n  }\n\n  return doc;\n}\n\nfunction SVGMeasure() {}\n\nSVGMeasure.prototype.measureSVG = function (svgString) {\n  var doc = parseSVG(svgString);\n  var docWidth = stripUnits(doc.attr.width);\n  var docHeight = stripUnits(doc.attr.height);\n\n  if ((docWidth == undefined || docHeight == undefined) && typeof doc.attr.viewBox == 'string') {\n    var viewBoxParts = doc.attr.viewBox.split(/[,\\s]+/);\n\n    if (viewBoxParts.length !== 4) {\n      throw new Error(\"Unexpected svg viewbox format, should have 4 entries but found: '\" + doc.attr.viewBox + \"'\");\n    }\n\n    if (docWidth == undefined) {\n      docWidth = stripUnits(viewBoxParts[2]);\n    }\n\n    if (docHeight == undefined) {\n      docHeight = stripUnits(viewBoxParts[3]);\n    }\n  }\n\n  return {\n    width: docWidth,\n    height: docHeight\n  };\n};\n\nSVGMeasure.prototype.writeDimensions = function (svgString, dimensions) {\n  var doc = parseSVG(svgString);\n  doc.attr.width = \"\" + dimensions.width;\n  doc.attr.height = \"\" + dimensions.height;\n  return doc.toString();\n};\n\nmodule.exports = SVGMeasure;","map":{"version":3,"sources":["/home/julianallende/Desktop/proyecto_sapo/client/node_modules/pdfmake/src/svgMeasure.js"],"names":["xmldoc","require","stripUnits","textVal","n","parseFloat","isNaN","undefined","parseSVG","svgString","doc","XmlDocument","err","Error","name","SVGMeasure","prototype","measureSVG","docWidth","attr","width","docHeight","height","viewBox","viewBoxParts","split","length","writeDimensions","dimensions","toString","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;AAEA;;;AACA,SAASC,UAAT,CAAoBC,OAApB,EAA6B;AAC5B,MAAIC,CAAC,GAAGC,UAAU,CAACF,OAAD,CAAlB;;AACA,MAAI,OAAOC,CAAP,KAAa,QAAb,IAAyBE,KAAK,CAACF,CAAD,CAAlC,EAAuC;AACtC,WAAOG,SAAP;AACA;;AACD,SAAOH,CAAP;AACA;AAED;;;AACA,SAASI,QAAT,CAAkBC,SAAlB,EAA6B;AAC5B,MAAIC,GAAJ;;AAEA,MAAI;AACHA,IAAAA,GAAG,GAAG,IAAIV,MAAM,CAACW,WAAX,CAAuBF,SAAvB,CAAN;AACA,GAFD,CAEE,OAAOG,GAAP,EAAY;AACb,UAAM,IAAIC,KAAJ,CAAU,iBAAiBD,GAA3B,CAAN;AACA;;AAED,MAAIF,GAAG,CAACI,IAAJ,KAAa,KAAjB,EAAwB;AACvB,UAAM,IAAID,KAAJ,CAAU,qCAAV,CAAN;AACA;;AAED,SAAOH,GAAP;AACA;;AAED,SAASK,UAAT,GAAsB,CACrB;;AAEDA,UAAU,CAACC,SAAX,CAAqBC,UAArB,GAAkC,UAAUR,SAAV,EAAqB;AAEtD,MAAIC,GAAG,GAAGF,QAAQ,CAACC,SAAD,CAAlB;AAEA,MAAIS,QAAQ,GAAGhB,UAAU,CAACQ,GAAG,CAACS,IAAJ,CAASC,KAAV,CAAzB;AACA,MAAIC,SAAS,GAAGnB,UAAU,CAACQ,GAAG,CAACS,IAAJ,CAASG,MAAV,CAA1B;;AAEA,MAAI,CAACJ,QAAQ,IAAIX,SAAZ,IAAyBc,SAAS,IAAId,SAAvC,KAAqD,OAAOG,GAAG,CAACS,IAAJ,CAASI,OAAhB,IAA2B,QAApF,EAA8F;AAC7F,QAAIC,YAAY,GAAGd,GAAG,CAACS,IAAJ,CAASI,OAAT,CAAiBE,KAAjB,CAAuB,QAAvB,CAAnB;;AACA,QAAID,YAAY,CAACE,MAAb,KAAwB,CAA5B,EAA+B;AAC9B,YAAM,IAAIb,KAAJ,CAAU,sEAAsEH,GAAG,CAACS,IAAJ,CAASI,OAA/E,GAAyF,GAAnG,CAAN;AACA;;AACD,QAAIL,QAAQ,IAAIX,SAAhB,EAA2B;AAC1BW,MAAAA,QAAQ,GAAGhB,UAAU,CAACsB,YAAY,CAAC,CAAD,CAAb,CAArB;AACA;;AACD,QAAIH,SAAS,IAAId,SAAjB,EAA4B;AAC3Bc,MAAAA,SAAS,GAAGnB,UAAU,CAACsB,YAAY,CAAC,CAAD,CAAb,CAAtB;AACA;AACD;;AAED,SAAO;AACNJ,IAAAA,KAAK,EAAEF,QADD;AAENI,IAAAA,MAAM,EAAED;AAFF,GAAP;AAIA,CAxBD;;AA0BAN,UAAU,CAACC,SAAX,CAAqBW,eAArB,GAAuC,UAAUlB,SAAV,EAAqBmB,UAArB,EAAiC;AAEvE,MAAIlB,GAAG,GAAGF,QAAQ,CAACC,SAAD,CAAlB;AAEAC,EAAAA,GAAG,CAACS,IAAJ,CAASC,KAAT,GAAiB,KAAKQ,UAAU,CAACR,KAAjC;AACAV,EAAAA,GAAG,CAACS,IAAJ,CAASG,MAAT,GAAkB,KAAKM,UAAU,CAACN,MAAlC;AAEA,SAAOZ,GAAG,CAACmB,QAAJ,EAAP;AACA,CARD;;AAUAC,MAAM,CAACC,OAAP,GAAiBhB,UAAjB","sourcesContent":["'use strict';\r\n\r\nvar xmldoc = require('xmldoc');\r\n\r\n/** Strip unit postfix, parse number, but return undefined instead of NaN for bad input */\r\nfunction stripUnits(textVal) {\r\n\tvar n = parseFloat(textVal);\r\n\tif (typeof n !== 'number' || isNaN(n)) {\r\n\t\treturn undefined;\r\n\t}\r\n\treturn n;\r\n}\r\n\r\n/** Make sure it's valid XML and the root tage is <svg/>, returns xmldoc DOM */\r\nfunction parseSVG(svgString) {\r\n\tvar doc;\r\n\t\r\n\ttry {\r\n\t\tdoc = new xmldoc.XmlDocument(svgString);\r\n\t} catch (err) {\r\n\t\tthrow new Error('SVGMeasure: ' + err);\r\n\t}\r\n\r\n\tif (doc.name !== \"svg\") {\r\n\t\tthrow new Error('SVGMeasure: expected <svg> document');\r\n\t}\r\n\r\n\treturn doc;\r\n}\r\n\r\nfunction SVGMeasure() {\r\n}\r\n\r\nSVGMeasure.prototype.measureSVG = function (svgString) {\r\n\r\n\tvar doc = parseSVG(svgString);\r\n\r\n\tvar docWidth = stripUnits(doc.attr.width);\r\n\tvar docHeight = stripUnits(doc.attr.height);\r\n\r\n\tif ((docWidth == undefined || docHeight == undefined) && typeof doc.attr.viewBox == 'string') {\r\n\t\tvar viewBoxParts = doc.attr.viewBox.split(/[,\\s]+/);\r\n\t\tif (viewBoxParts.length !== 4) {\r\n\t\t\tthrow new Error(\"Unexpected svg viewbox format, should have 4 entries but found: '\" + doc.attr.viewBox + \"'\");\r\n\t\t}\r\n\t\tif (docWidth == undefined) {\r\n\t\t\tdocWidth = stripUnits(viewBoxParts[2]);\r\n\t\t}\r\n\t\tif (docHeight == undefined) {\r\n\t\t\tdocHeight = stripUnits(viewBoxParts[3]);\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\twidth: docWidth,\r\n\t\theight: docHeight\r\n\t};\r\n};\r\n\r\nSVGMeasure.prototype.writeDimensions = function (svgString, dimensions) {\r\n\r\n\tvar doc = parseSVG(svgString);\r\n\r\n\tdoc.attr.width = \"\" + dimensions.width;\r\n\tdoc.attr.height = \"\" + dimensions.height;\r\n\r\n\treturn doc.toString();\r\n};\r\n\r\nmodule.exports = SVGMeasure;\r\n"]},"metadata":{},"sourceType":"script"}