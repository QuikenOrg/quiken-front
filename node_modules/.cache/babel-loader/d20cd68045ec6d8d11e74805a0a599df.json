{"ast":null,"code":"/*eslint no-unused-vars: [\"error\", {\"args\": \"none\"}]*/\n\n/*eslint no-redeclare: \"off\"*/\n'use strict';\n/* qr.js -- QR code generator in Javascript (revision 2011-01-19)\r\n * Written by Kang Seonghoon <public+qrjs@mearie.org>.\r\n *\r\n * This source code is in the public domain; if your jurisdiction does not\r\n * recognize the public domain the terms of Creative Commons CC0 license\r\n * apply. In the other words, you can always do what you want.\r\n */\n// per-version information (cf. JIS X 0510:2004 pp. 30--36, 71)\n//\n// [0]: the degree of generator polynomial by ECC levels\n// [1]: # of code blocks by ECC levels\n// [2]: left-top positions of alignment patterns\n//\n// the number in this table (in particular, [0]) does not exactly match with\n// the numbers in the specficiation. see augumenteccs below for the reason.\n\nvar VERSIONS = [null, [[10, 7, 17, 13], [1, 1, 1, 1], []], [[16, 10, 28, 22], [1, 1, 1, 1], [4, 16]], [[26, 15, 22, 18], [1, 1, 2, 2], [4, 20]], [[18, 20, 16, 26], [2, 1, 4, 2], [4, 24]], [[24, 26, 22, 18], [2, 1, 4, 4], [4, 28]], [[16, 18, 28, 24], [4, 2, 4, 4], [4, 32]], [[18, 20, 26, 18], [4, 2, 5, 6], [4, 20, 36]], [[22, 24, 26, 22], [4, 2, 6, 6], [4, 22, 40]], [[22, 30, 24, 20], [5, 2, 8, 8], [4, 24, 44]], [[26, 18, 28, 24], [5, 4, 8, 8], [4, 26, 48]], [[30, 20, 24, 28], [5, 4, 11, 8], [4, 28, 52]], [[22, 24, 28, 26], [8, 4, 11, 10], [4, 30, 56]], [[22, 26, 22, 24], [9, 4, 16, 12], [4, 32, 60]], [[24, 30, 24, 20], [9, 4, 16, 16], [4, 24, 44, 64]], [[24, 22, 24, 30], [10, 6, 18, 12], [4, 24, 46, 68]], [[28, 24, 30, 24], [10, 6, 16, 17], [4, 24, 48, 72]], [[28, 28, 28, 28], [11, 6, 19, 16], [4, 28, 52, 76]], [[26, 30, 28, 28], [13, 6, 21, 18], [4, 28, 54, 80]], [[26, 28, 26, 26], [14, 7, 25, 21], [4, 28, 56, 84]], [[26, 28, 28, 30], [16, 8, 25, 20], [4, 32, 60, 88]], [[26, 28, 30, 28], [17, 8, 25, 23], [4, 26, 48, 70, 92]], [[28, 28, 24, 30], [17, 9, 34, 23], [4, 24, 48, 72, 96]], [[28, 30, 30, 30], [18, 9, 30, 25], [4, 28, 52, 76, 100]], [[28, 30, 30, 30], [20, 10, 32, 27], [4, 26, 52, 78, 104]], [[28, 26, 30, 30], [21, 12, 35, 29], [4, 30, 56, 82, 108]], [[28, 28, 30, 28], [23, 12, 37, 34], [4, 28, 56, 84, 112]], [[28, 30, 30, 30], [25, 12, 40, 34], [4, 32, 60, 88, 116]], [[28, 30, 30, 30], [26, 13, 42, 35], [4, 24, 48, 72, 96, 120]], [[28, 30, 30, 30], [28, 14, 45, 38], [4, 28, 52, 76, 100, 124]], [[28, 30, 30, 30], [29, 15, 48, 40], [4, 24, 50, 76, 102, 128]], [[28, 30, 30, 30], [31, 16, 51, 43], [4, 28, 54, 80, 106, 132]], [[28, 30, 30, 30], [33, 17, 54, 45], [4, 32, 58, 84, 110, 136]], [[28, 30, 30, 30], [35, 18, 57, 48], [4, 28, 56, 84, 112, 140]], [[28, 30, 30, 30], [37, 19, 60, 51], [4, 32, 60, 88, 116, 144]], [[28, 30, 30, 30], [38, 19, 63, 53], [4, 28, 52, 76, 100, 124, 148]], [[28, 30, 30, 30], [40, 20, 66, 56], [4, 22, 48, 74, 100, 126, 152]], [[28, 30, 30, 30], [43, 21, 70, 59], [4, 26, 52, 78, 104, 130, 156]], [[28, 30, 30, 30], [45, 22, 74, 62], [4, 30, 56, 82, 108, 134, 160]], [[28, 30, 30, 30], [47, 24, 77, 65], [4, 24, 52, 80, 108, 136, 164]], [[28, 30, 30, 30], [49, 25, 81, 68], [4, 28, 56, 84, 112, 140, 168]]]; // mode constants (cf. Table 2 in JIS X 0510:2004 p. 16)\n\nvar MODE_TERMINATOR = 0;\nvar MODE_NUMERIC = 1,\n    MODE_ALPHANUMERIC = 2,\n    MODE_OCTET = 4,\n    MODE_KANJI = 8; // validation regexps\n\nvar NUMERIC_REGEXP = /^\\d*$/;\nvar ALPHANUMERIC_REGEXP = /^[A-Za-z0-9 $%*+\\-./:]*$/;\nvar ALPHANUMERIC_OUT_REGEXP = /^[A-Z0-9 $%*+\\-./:]*$/; // ECC levels (cf. Table 22 in JIS X 0510:2004 p. 45)\n\nvar ECCLEVEL_L = 1,\n    ECCLEVEL_M = 0,\n    ECCLEVEL_Q = 3,\n    ECCLEVEL_H = 2; // GF(2^8)-to-integer mapping with a reducing polynomial x^8+x^4+x^3+x^2+1\n// invariant: GF256_MAP[GF256_INVMAP[i]] == i for all i in [1,256)\n\nvar GF256_MAP = [],\n    GF256_INVMAP = [-1];\n\nfor (var i = 0, v = 1; i < 255; ++i) {\n  GF256_MAP.push(v);\n  GF256_INVMAP[v] = i;\n  v = v * 2 ^ (v >= 128 ? 0x11d : 0);\n} // generator polynomials up to degree 30\n// (should match with polynomials in JIS X 0510:2004 Appendix A)\n//\n// generator polynomial of degree K is product of (x-\\alpha^0), (x-\\alpha^1),\n// ..., (x-\\alpha^(K-1)). by convention, we omit the K-th coefficient (always 1)\n// from the result; also other coefficients are written in terms of the exponent\n// to \\alpha to avoid the redundant calculation. (see also calculateecc below.)\n\n\nvar GF256_GENPOLY = [[]];\n\nfor (var i = 0; i < 30; ++i) {\n  var prevpoly = GF256_GENPOLY[i],\n      poly = [];\n\n  for (var j = 0; j <= i; ++j) {\n    var a = j < i ? GF256_MAP[prevpoly[j]] : 0;\n    var b = GF256_MAP[(i + (prevpoly[j - 1] || 0)) % 255];\n    poly.push(GF256_INVMAP[a ^ b]);\n  }\n\n  GF256_GENPOLY.push(poly);\n} // alphanumeric character mapping (cf. Table 5 in JIS X 0510:2004 p. 19)\n\n\nvar ALPHANUMERIC_MAP = {};\n\nfor (var i = 0; i < 45; ++i) {\n  ALPHANUMERIC_MAP['0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:'.charAt(i)] = i;\n} // mask functions in terms of row # and column #\n// (cf. Table 20 in JIS X 0510:2004 p. 42)\n\n/*jshint unused: false */\n\n\nvar MASKFUNCS = [function (i, j) {\n  return (i + j) % 2 === 0;\n}, function (i, j) {\n  return i % 2 === 0;\n}, function (i, j) {\n  return j % 3 === 0;\n}, function (i, j) {\n  return (i + j) % 3 === 0;\n}, function (i, j) {\n  return ((i / 2 | 0) + (j / 3 | 0)) % 2 === 0;\n}, function (i, j) {\n  return i * j % 2 + i * j % 3 === 0;\n}, function (i, j) {\n  return (i * j % 2 + i * j % 3) % 2 === 0;\n}, function (i, j) {\n  return ((i + j) % 2 + i * j % 3) % 2 === 0;\n}]; // returns true when the version information has to be embeded.\n\nvar needsverinfo = function (ver) {\n  return ver > 6;\n}; // returns the size of entire QR code for given version.\n\n\nvar getsizebyver = function (ver) {\n  return 4 * ver + 17;\n}; // returns the number of bits available for code words in this version.\n\n\nvar nfullbits = function (ver) {\n  /*\r\n   * |<--------------- n --------------->|\r\n   * |        |<----- n-17 ---->|        |\r\n   * +-------+                ///+-------+ ----\r\n   * |       |                ///|       |    ^\r\n   * |  9x9  |       @@@@@    ///|  9x8  |    |\r\n   * |       | # # # @5x5@ # # # |       |    |\r\n   * +-------+       @@@@@       +-------+    |\r\n   *       #                               ---|\r\n   *                                        ^ |\r\n   *       #                                |\r\n   *     @@@@@       @@@@@       @@@@@      | n\r\n   *     @5x5@       @5x5@       @5x5@   n-17\r\n   *     @@@@@       @@@@@       @@@@@      | |\r\n   *       #                                | |\r\n   * //////                                 v |\r\n   * //////#                               ---|\r\n   * +-------+       @@@@@       @@@@@        |\r\n   * |       |       @5x5@       @5x5@        |\r\n   * |  8x9  |       @@@@@       @@@@@        |\r\n   * |       |                                v\r\n   * +-------+                             ----\r\n   *\r\n   * when the entire code has n^2 modules and there are m^2-3 alignment\r\n   * patterns, we have:\r\n   * - 225 (= 9x9 + 9x8 + 8x9) modules for finder patterns and\r\n   *   format information;\r\n   * - 2n-34 (= 2(n-17)) modules for timing patterns;\r\n   * - 36 (= 3x6 + 6x3) modules for version information, if any;\r\n   * - 25m^2-75 (= (m^2-3)(5x5)) modules for alignment patterns\r\n   *   if any, but 10m-20 (= 2(m-2)x5) of them overlaps with\r\n   *   timing patterns.\r\n   */\n  var v = VERSIONS[ver];\n  var nbits = 16 * ver * ver + 128 * ver + 64; // finder, timing and format info.\n\n  if (needsverinfo(ver)) nbits -= 36; // version information\n\n  if (v[2].length) {\n    // alignment patterns\n    nbits -= 25 * v[2].length * v[2].length - 10 * v[2].length - 55;\n  }\n\n  return nbits;\n}; // returns the number of bits available for data portions (i.e. excludes ECC\n// bits but includes mode and length bits) in this version and ECC level.\n\n\nvar ndatabits = function (ver, ecclevel) {\n  var nbits = nfullbits(ver) & ~7; // no sub-octet code words\n\n  var v = VERSIONS[ver];\n  nbits -= 8 * v[0][ecclevel] * v[1][ecclevel]; // ecc bits\n\n  return nbits;\n}; // returns the number of bits required for the length of data.\n// (cf. Table 3 in JIS X 0510:2004 p. 16)\n\n\nvar ndatalenbits = function (ver, mode) {\n  switch (mode) {\n    case MODE_NUMERIC:\n      return ver < 10 ? 10 : ver < 27 ? 12 : 14;\n\n    case MODE_ALPHANUMERIC:\n      return ver < 10 ? 9 : ver < 27 ? 11 : 13;\n\n    case MODE_OCTET:\n      return ver < 10 ? 8 : 16;\n\n    case MODE_KANJI:\n      return ver < 10 ? 8 : ver < 27 ? 10 : 12;\n  }\n}; // returns the maximum length of data possible in given configuration.\n\n\nvar getmaxdatalen = function (ver, mode, ecclevel) {\n  var nbits = ndatabits(ver, ecclevel) - 4 - ndatalenbits(ver, mode); // 4 for mode bits\n\n  switch (mode) {\n    case MODE_NUMERIC:\n      return (nbits / 10 | 0) * 3 + (nbits % 10 < 4 ? 0 : nbits % 10 < 7 ? 1 : 2);\n\n    case MODE_ALPHANUMERIC:\n      return (nbits / 11 | 0) * 2 + (nbits % 11 < 6 ? 0 : 1);\n\n    case MODE_OCTET:\n      return nbits / 8 | 0;\n\n    case MODE_KANJI:\n      return nbits / 13 | 0;\n  }\n}; // checks if the given data can be encoded in given mode, and returns\n// the converted data for the further processing if possible. otherwise\n// returns null.\n//\n// this function does not check the length of data; it is a duty of\n// encode function below (as it depends on the version and ECC level too).\n\n\nvar validatedata = function (mode, data) {\n  switch (mode) {\n    case MODE_NUMERIC:\n      if (!data.match(NUMERIC_REGEXP)) return null;\n      return data;\n\n    case MODE_ALPHANUMERIC:\n      if (!data.match(ALPHANUMERIC_REGEXP)) return null;\n      return data.toUpperCase();\n\n    case MODE_OCTET:\n      if (typeof data === 'string') {\n        // encode as utf-8 string\n        var newdata = [];\n\n        for (var i = 0; i < data.length; ++i) {\n          var ch = data.charCodeAt(i);\n\n          if (ch < 0x80) {\n            newdata.push(ch);\n          } else if (ch < 0x800) {\n            newdata.push(0xc0 | ch >> 6, 0x80 | ch & 0x3f);\n          } else if (ch < 0x10000) {\n            newdata.push(0xe0 | ch >> 12, 0x80 | ch >> 6 & 0x3f, 0x80 | ch & 0x3f);\n          } else {\n            newdata.push(0xf0 | ch >> 18, 0x80 | ch >> 12 & 0x3f, 0x80 | ch >> 6 & 0x3f, 0x80 | ch & 0x3f);\n          }\n        }\n\n        return newdata;\n      } else {\n        return data;\n      }\n\n  }\n}; // returns the code words (sans ECC bits) for given data and configurations.\n// requires data to be preprocessed by validatedata. no length check is\n// performed, and everything has to be checked before calling this function.\n\n\nvar encode = function (ver, mode, data, maxbuflen) {\n  var buf = [];\n  var bits = 0,\n      remaining = 8;\n  var datalen = data.length; // this function is intentionally no-op when n=0.\n\n  var pack = function (x, n) {\n    if (n >= remaining) {\n      buf.push(bits | x >> (n -= remaining));\n\n      while (n >= 8) buf.push(x >> (n -= 8) & 255);\n\n      bits = 0;\n      remaining = 8;\n    }\n\n    if (n > 0) bits |= (x & (1 << n) - 1) << (remaining -= n);\n  };\n\n  var nlenbits = ndatalenbits(ver, mode);\n  pack(mode, 4);\n  pack(datalen, nlenbits);\n\n  switch (mode) {\n    case MODE_NUMERIC:\n      for (var i = 2; i < datalen; i += 3) {\n        pack(parseInt(data.substring(i - 2, i + 1), 10), 10);\n      }\n\n      pack(parseInt(data.substring(i - 2), 10), [0, 4, 7][datalen % 3]);\n      break;\n\n    case MODE_ALPHANUMERIC:\n      for (var i = 1; i < datalen; i += 2) {\n        pack(ALPHANUMERIC_MAP[data.charAt(i - 1)] * 45 + ALPHANUMERIC_MAP[data.charAt(i)], 11);\n      }\n\n      if (datalen % 2 == 1) {\n        pack(ALPHANUMERIC_MAP[data.charAt(i - 1)], 6);\n      }\n\n      break;\n\n    case MODE_OCTET:\n      for (var i = 0; i < datalen; ++i) {\n        pack(data[i], 8);\n      }\n\n      break;\n  } // final bits. it is possible that adding terminator causes the buffer\n  // to overflow, but then the buffer truncated to the maximum size will\n  // be valid as the truncated terminator mode bits and padding is\n  // identical in appearance (cf. JIS X 0510:2004 sec 8.4.8).\n\n\n  pack(MODE_TERMINATOR, 4);\n  if (remaining < 8) buf.push(bits); // the padding to fill up the remaining space. we should not add any\n  // words when the overflow already occurred.\n\n  while (buf.length + 1 < maxbuflen) buf.push(0xec, 0x11);\n\n  if (buf.length < maxbuflen) buf.push(0xec);\n  return buf;\n}; // calculates ECC code words for given code words and generator polynomial.\n//\n// this is quite similar to CRC calculation as both Reed-Solomon and CRC use\n// the certain kind of cyclic codes, which is effectively the division of\n// zero-augumented polynomial by the generator polynomial. the only difference\n// is that Reed-Solomon uses GF(2^8), instead of CRC's GF(2), and Reed-Solomon\n// uses the different generator polynomial than CRC's.\n\n\nvar calculateecc = function (poly, genpoly) {\n  var modulus = poly.slice(0);\n  var polylen = poly.length,\n      genpolylen = genpoly.length;\n\n  for (var i = 0; i < genpolylen; ++i) modulus.push(0);\n\n  for (var i = 0; i < polylen;) {\n    var quotient = GF256_INVMAP[modulus[i++]];\n\n    if (quotient >= 0) {\n      for (var j = 0; j < genpolylen; ++j) {\n        modulus[i + j] ^= GF256_MAP[(quotient + genpoly[j]) % 255];\n      }\n    }\n  }\n\n  return modulus.slice(polylen);\n}; // auguments ECC code words to given code words. the resulting words are\n// ready to be encoded in the matrix.\n//\n// the much of actual augumenting procedure follows JIS X 0510:2004 sec 8.7.\n// the code is simplified using the fact that the size of each code & ECC\n// blocks is almost same; for example, when we have 4 blocks and 46 data words\n// the number of code words in those blocks are 11, 11, 12, 12 respectively.\n\n\nvar augumenteccs = function (poly, nblocks, genpoly) {\n  var subsizes = [];\n  var subsize = poly.length / nblocks | 0,\n      subsize0 = 0;\n  var pivot = nblocks - poly.length % nblocks;\n\n  for (var i = 0; i < pivot; ++i) {\n    subsizes.push(subsize0);\n    subsize0 += subsize;\n  }\n\n  for (var i = pivot; i < nblocks; ++i) {\n    subsizes.push(subsize0);\n    subsize0 += subsize + 1;\n  }\n\n  subsizes.push(subsize0);\n  var eccs = [];\n\n  for (var i = 0; i < nblocks; ++i) {\n    eccs.push(calculateecc(poly.slice(subsizes[i], subsizes[i + 1]), genpoly));\n  }\n\n  var result = [];\n  var nitemsperblock = poly.length / nblocks | 0;\n\n  for (var i = 0; i < nitemsperblock; ++i) {\n    for (var j = 0; j < nblocks; ++j) {\n      result.push(poly[subsizes[j] + i]);\n    }\n  }\n\n  for (var j = pivot; j < nblocks; ++j) {\n    result.push(poly[subsizes[j + 1] - 1]);\n  }\n\n  for (var i = 0; i < genpoly.length; ++i) {\n    for (var j = 0; j < nblocks; ++j) {\n      result.push(eccs[j][i]);\n    }\n  }\n\n  return result;\n}; // auguments BCH(p+q,q) code to the polynomial over GF(2), given the proper\n// genpoly. the both input and output are in binary numbers, and unlike\n// calculateecc genpoly should include the 1 bit for the highest degree.\n//\n// actual polynomials used for this procedure are as follows:\n// - p=10, q=5, genpoly=x^10+x^8+x^5+x^4+x^2+x+1 (JIS X 0510:2004 Appendix C)\n// - p=18, q=6, genpoly=x^12+x^11+x^10+x^9+x^8+x^5+x^2+1 (ibid. Appendix D)\n\n\nvar augumentbch = function (poly, p, genpoly, q) {\n  var modulus = poly << q;\n\n  for (var i = p - 1; i >= 0; --i) {\n    if (modulus >> q + i & 1) modulus ^= genpoly << i;\n  }\n\n  return poly << q | modulus;\n}; // creates the base matrix for given version. it returns two matrices, one of\n// them is the actual one and the another represents the \"reserved\" portion\n// (e.g. finder and timing patterns) of the matrix.\n//\n// some entries in the matrix may be undefined, rather than 0 or 1. this is\n// intentional (no initialization needed!), and putdata below will fill\n// the remaining ones.\n\n\nvar makebasematrix = function (ver) {\n  var v = VERSIONS[ver],\n      n = getsizebyver(ver);\n  var matrix = [],\n      reserved = [];\n\n  for (var i = 0; i < n; ++i) {\n    matrix.push([]);\n    reserved.push([]);\n  }\n\n  var blit = function (y, x, h, w, bits) {\n    for (var i = 0; i < h; ++i) {\n      for (var j = 0; j < w; ++j) {\n        matrix[y + i][x + j] = bits[i] >> j & 1;\n        reserved[y + i][x + j] = 1;\n      }\n    }\n  }; // finder patterns and a part of timing patterns\n  // will also mark the format information area (not yet written) as reserved.\n\n\n  blit(0, 0, 9, 9, [0x7f, 0x41, 0x5d, 0x5d, 0x5d, 0x41, 0x17f, 0x00, 0x40]);\n  blit(n - 8, 0, 8, 9, [0x100, 0x7f, 0x41, 0x5d, 0x5d, 0x5d, 0x41, 0x7f]);\n  blit(0, n - 8, 9, 8, [0xfe, 0x82, 0xba, 0xba, 0xba, 0x82, 0xfe, 0x00, 0x00]); // the rest of timing patterns\n\n  for (var i = 9; i < n - 8; ++i) {\n    matrix[6][i] = matrix[i][6] = ~i & 1;\n    reserved[6][i] = reserved[i][6] = 1;\n  } // alignment patterns\n\n\n  var aligns = v[2],\n      m = aligns.length;\n\n  for (var i = 0; i < m; ++i) {\n    var minj = i === 0 || i === m - 1 ? 1 : 0,\n        maxj = i === 0 ? m - 1 : m;\n\n    for (var j = minj; j < maxj; ++j) {\n      blit(aligns[i], aligns[j], 5, 5, [0x1f, 0x11, 0x15, 0x11, 0x1f]);\n    }\n  } // version information\n\n\n  if (needsverinfo(ver)) {\n    var code = augumentbch(ver, 6, 0x1f25, 12);\n    var k = 0;\n\n    for (var i = 0; i < 6; ++i) {\n      for (var j = 0; j < 3; ++j) {\n        matrix[i][n - 11 + j] = matrix[n - 11 + j][i] = code >> k++ & 1;\n        reserved[i][n - 11 + j] = reserved[n - 11 + j][i] = 1;\n      }\n    }\n  }\n\n  return {\n    matrix: matrix,\n    reserved: reserved\n  };\n}; // fills the data portion (i.e. unmarked in reserved) of the matrix with given\n// code words. the size of code words should be no more than available bits,\n// and remaining bits are padded to 0 (cf. JIS X 0510:2004 sec 8.7.3).\n\n\nvar putdata = function (matrix, reserved, buf) {\n  var n = matrix.length;\n  var k = 0,\n      dir = -1;\n\n  for (var i = n - 1; i >= 0; i -= 2) {\n    if (i == 6) --i; // skip the entire timing pattern column\n\n    var jj = dir < 0 ? n - 1 : 0;\n\n    for (var j = 0; j < n; ++j) {\n      for (var ii = i; ii > i - 2; --ii) {\n        if (!reserved[jj][ii]) {\n          // may overflow, but (undefined >> x)\n          // is 0 so it will auto-pad to zero.\n          matrix[jj][ii] = buf[k >> 3] >> (~k & 7) & 1;\n          ++k;\n        }\n      }\n\n      jj += dir;\n    }\n\n    dir = -dir;\n  }\n\n  return matrix;\n}; // XOR-masks the data portion of the matrix. repeating the call with the same\n// arguments will revert the prior call (convenient in the matrix evaluation).\n\n\nvar maskdata = function (matrix, reserved, mask) {\n  var maskf = MASKFUNCS[mask];\n  var n = matrix.length;\n\n  for (var i = 0; i < n; ++i) {\n    for (var j = 0; j < n; ++j) {\n      if (!reserved[i][j]) matrix[i][j] ^= maskf(i, j);\n    }\n  }\n\n  return matrix;\n}; // puts the format information.\n\n\nvar putformatinfo = function (matrix, reserved, ecclevel, mask) {\n  var n = matrix.length;\n  var code = augumentbch(ecclevel << 3 | mask, 5, 0x537, 10) ^ 0x5412;\n\n  for (var i = 0; i < 15; ++i) {\n    var r = [0, 1, 2, 3, 4, 5, 7, 8, n - 7, n - 6, n - 5, n - 4, n - 3, n - 2, n - 1][i];\n    var c = [n - 1, n - 2, n - 3, n - 4, n - 5, n - 6, n - 7, n - 8, 7, 5, 4, 3, 2, 1, 0][i];\n    matrix[r][8] = matrix[8][c] = code >> i & 1; // we don't have to mark those bits reserved; always done\n    // in makebasematrix above.\n  }\n\n  return matrix;\n}; // evaluates the resulting matrix and returns the score (lower is better).\n// (cf. JIS X 0510:2004 sec 8.8.2)\n//\n// the evaluation procedure tries to avoid the problematic patterns naturally\n// occuring from the original matrix. for example, it penaltizes the patterns\n// which just look like the finder pattern which will confuse the decoder.\n// we choose the mask which results in the lowest score among 8 possible ones.\n//\n// note: zxing seems to use the same procedure and in many cases its choice\n// agrees to ours, but sometimes it does not. practically it doesn't matter.\n\n\nvar evaluatematrix = function (matrix) {\n  // N1+(k-5) points for each consecutive row of k same-colored modules,\n  // where k >= 5. no overlapping row counts.\n  var PENALTY_CONSECUTIVE = 3; // N2 points for each 2x2 block of same-colored modules.\n  // overlapping block does count.\n\n  var PENALTY_TWOBYTWO = 3; // N3 points for each pattern with >4W:1B:1W:3B:1W:1B or\n  // 1B:1W:3B:1W:1B:>4W, or their multiples (e.g. highly unlikely,\n  // but 13W:3B:3W:9B:3W:3B counts).\n\n  var PENALTY_FINDERLIKE = 40; // N4*k points for every (5*k)% deviation from 50% black density.\n  // i.e. k=1 for 55~60% and 40~45%, k=2 for 60~65% and 35~40%, etc.\n\n  var PENALTY_DENSITY = 10;\n\n  var evaluategroup = function (groups) {\n    // assumes [W,B,W,B,W,...,B,W]\n    var score = 0;\n\n    for (var i = 0; i < groups.length; ++i) {\n      if (groups[i] >= 5) score += PENALTY_CONSECUTIVE + (groups[i] - 5);\n    }\n\n    for (var i = 5; i < groups.length; i += 2) {\n      var p = groups[i];\n\n      if (groups[i - 1] == p && groups[i - 2] == 3 * p && groups[i - 3] == p && groups[i - 4] == p && (groups[i - 5] >= 4 * p || groups[i + 1] >= 4 * p)) {\n        // this part differs from zxing...\n        score += PENALTY_FINDERLIKE;\n      }\n    }\n\n    return score;\n  };\n\n  var n = matrix.length;\n  var score = 0,\n      nblacks = 0;\n\n  for (var i = 0; i < n; ++i) {\n    var row = matrix[i];\n    var groups; // evaluate the current row\n\n    groups = [0]; // the first empty group of white\n\n    for (var j = 0; j < n;) {\n      var k;\n\n      for (k = 0; j < n && row[j]; ++k) ++j;\n\n      groups.push(k);\n\n      for (k = 0; j < n && !row[j]; ++k) ++j;\n\n      groups.push(k);\n    }\n\n    score += evaluategroup(groups); // evaluate the current column\n\n    groups = [0];\n\n    for (var j = 0; j < n;) {\n      var k;\n\n      for (k = 0; j < n && matrix[j][i]; ++k) ++j;\n\n      groups.push(k);\n\n      for (k = 0; j < n && !matrix[j][i]; ++k) ++j;\n\n      groups.push(k);\n    }\n\n    score += evaluategroup(groups); // check the 2x2 box and calculate the density\n\n    var nextrow = matrix[i + 1] || [];\n    nblacks += row[0];\n\n    for (var j = 1; j < n; ++j) {\n      var p = row[j];\n      nblacks += p; // at least comparison with next row should be strict...\n\n      if (row[j - 1] == p && nextrow[j] === p && nextrow[j - 1] === p) {\n        score += PENALTY_TWOBYTWO;\n      }\n    }\n  }\n\n  score += PENALTY_DENSITY * (Math.abs(nblacks / n / n - 0.5) / 0.05 | 0);\n  return score;\n}; // returns the fully encoded QR code matrix which contains given data.\n// it also chooses the best mask automatically when mask is -1.\n\n\nvar generate = function (data, ver, mode, ecclevel, mask) {\n  var v = VERSIONS[ver];\n  var buf = encode(ver, mode, data, ndatabits(ver, ecclevel) >> 3);\n  buf = augumenteccs(buf, v[1][ecclevel], GF256_GENPOLY[v[0][ecclevel]]);\n  var result = makebasematrix(ver);\n  var matrix = result.matrix,\n      reserved = result.reserved;\n  putdata(matrix, reserved, buf);\n\n  if (mask < 0) {\n    // find the best mask\n    maskdata(matrix, reserved, 0);\n    putformatinfo(matrix, reserved, ecclevel, 0);\n    var bestmask = 0,\n        bestscore = evaluatematrix(matrix);\n    maskdata(matrix, reserved, 0);\n\n    for (mask = 1; mask < 8; ++mask) {\n      maskdata(matrix, reserved, mask);\n      putformatinfo(matrix, reserved, ecclevel, mask);\n      var score = evaluatematrix(matrix);\n\n      if (bestscore > score) {\n        bestscore = score;\n        bestmask = mask;\n      }\n\n      maskdata(matrix, reserved, mask);\n    }\n\n    mask = bestmask;\n  }\n\n  maskdata(matrix, reserved, mask);\n  putformatinfo(matrix, reserved, ecclevel, mask);\n  return matrix;\n}; // the public interface is trivial; the options available are as follows:\n//\n// - version: an integer in [1,40]. when omitted (or -1) the smallest possible\n//   version is chosen.\n// - mode: one of 'numeric', 'alphanumeric', 'octet'. when omitted the smallest\n//   possible mode is chosen.\n// - eccLevel: one of 'L', 'M', 'Q', 'H'. defaults to 'L'.\n// - mask: an integer in [0,7]. when omitted (or -1) the best mask is chosen.\n//\n\n\nfunction generateFrame(data, options) {\n  var MODES = {\n    'numeric': MODE_NUMERIC,\n    'alphanumeric': MODE_ALPHANUMERIC,\n    'octet': MODE_OCTET\n  };\n  var ECCLEVELS = {\n    'L': ECCLEVEL_L,\n    'M': ECCLEVEL_M,\n    'Q': ECCLEVEL_Q,\n    'H': ECCLEVEL_H\n  };\n  options = options || {};\n  var ver = options.version || -1;\n  var ecclevel = ECCLEVELS[(options.eccLevel || 'L').toUpperCase()];\n  var mode = options.mode ? MODES[options.mode.toLowerCase()] : -1;\n  var mask = 'mask' in options ? options.mask : -1;\n\n  if (mode < 0) {\n    if (typeof data === 'string') {\n      if (data.match(NUMERIC_REGEXP)) {\n        mode = MODE_NUMERIC;\n      } else if (data.match(ALPHANUMERIC_OUT_REGEXP)) {\n        // while encode supports case-insensitive encoding, we restrict the data to be uppercased when auto-selecting the mode.\n        mode = MODE_ALPHANUMERIC;\n      } else {\n        mode = MODE_OCTET;\n      }\n    } else {\n      mode = MODE_OCTET;\n    }\n  } else if (!(mode == MODE_NUMERIC || mode == MODE_ALPHANUMERIC || mode == MODE_OCTET)) {\n    throw 'invalid or unsupported mode';\n  }\n\n  data = validatedata(mode, data);\n  if (data === null) throw 'invalid data format';\n  if (ecclevel < 0 || ecclevel > 3) throw 'invalid ECC level';\n\n  if (ver < 0) {\n    for (ver = 1; ver <= 40; ++ver) {\n      if (data.length <= getmaxdatalen(ver, mode, ecclevel)) break;\n    }\n\n    if (ver > 40) throw 'too large data for the Qr format';\n  } else if (ver < 1 || ver > 40) {\n    throw 'invalid Qr version! should be between 1 and 40';\n  }\n\n  if (mask != -1 && (mask < 0 || mask > 8)) throw 'invalid mask'; //console.log('version:', ver, 'mode:', mode, 'ECC:', ecclevel, 'mask:', mask )\n\n  return generate(data, ver, mode, ecclevel, mask);\n} // options\n// - modulesize: a number. this is a size of each modules in pixels, and\n//   defaults to 5px.\n// - margin: a number. this is a size of margin in *modules*, and defaults to\n//   4 (white modules). the specficiation mandates the margin no less than 4\n//   modules, so it is better not to alter this value unless you know what\n//   you're doing.\n\n\nfunction buildCanvas(data, options) {\n  var canvas = [];\n  var background = options.background || '#fff';\n  var foreground = options.foreground || '#000'; //var margin = options.margin || 4;\n\n  var matrix = generateFrame(data, options);\n  var n = matrix.length;\n  var modSize = Math.floor(options.fit ? options.fit / n : 5);\n  var size = n * modSize;\n  canvas.push({\n    type: 'rect',\n    x: 0,\n    y: 0,\n    w: size,\n    h: size,\n    lineWidth: 0,\n    color: background\n  });\n\n  for (var i = 0; i < n; ++i) {\n    for (var j = 0; j < n; ++j) {\n      if (matrix[i][j]) {\n        canvas.push({\n          type: 'rect',\n          x: modSize * j,\n          y: modSize * i,\n          w: modSize,\n          h: modSize,\n          lineWidth: 0,\n          color: foreground\n        });\n      }\n    }\n  }\n\n  return {\n    canvas: canvas,\n    size: size\n  };\n}\n\nfunction measure(node) {\n  var cd = buildCanvas(node.qr, node);\n  node._canvas = cd.canvas;\n  node._width = node._height = node._minWidth = node._maxWidth = node._minHeight = node._maxHeight = cd.size;\n  return node;\n}\n\nmodule.exports = {\n  measure: measure\n};","map":{"version":3,"sources":["/home/julianallende/Desktop/proyecto_sapo/client/node_modules/pdfmake/src/qrEnc.js"],"names":["VERSIONS","MODE_TERMINATOR","MODE_NUMERIC","MODE_ALPHANUMERIC","MODE_OCTET","MODE_KANJI","NUMERIC_REGEXP","ALPHANUMERIC_REGEXP","ALPHANUMERIC_OUT_REGEXP","ECCLEVEL_L","ECCLEVEL_M","ECCLEVEL_Q","ECCLEVEL_H","GF256_MAP","GF256_INVMAP","i","v","push","GF256_GENPOLY","prevpoly","poly","j","a","b","ALPHANUMERIC_MAP","charAt","MASKFUNCS","needsverinfo","ver","getsizebyver","nfullbits","nbits","length","ndatabits","ecclevel","ndatalenbits","mode","getmaxdatalen","validatedata","data","match","toUpperCase","newdata","ch","charCodeAt","encode","maxbuflen","buf","bits","remaining","datalen","pack","x","n","nlenbits","parseInt","substring","calculateecc","genpoly","modulus","slice","polylen","genpolylen","quotient","augumenteccs","nblocks","subsizes","subsize","subsize0","pivot","eccs","result","nitemsperblock","augumentbch","p","q","makebasematrix","matrix","reserved","blit","y","h","w","aligns","m","minj","maxj","code","k","putdata","dir","jj","ii","maskdata","mask","maskf","putformatinfo","r","c","evaluatematrix","PENALTY_CONSECUTIVE","PENALTY_TWOBYTWO","PENALTY_FINDERLIKE","PENALTY_DENSITY","evaluategroup","groups","score","nblacks","row","nextrow","Math","abs","generate","bestmask","bestscore","generateFrame","options","MODES","ECCLEVELS","version","eccLevel","toLowerCase","buildCanvas","canvas","background","foreground","modSize","floor","fit","size","type","lineWidth","color","measure","node","cd","qr","_canvas","_width","_height","_minWidth","_maxWidth","_minHeight","_maxHeight","module","exports"],"mappings":"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","sourcesContent":["/*eslint no-unused-vars: [\"error\", {\"args\": \"none\"}]*/\r\n/*eslint no-redeclare: \"off\"*/\r\n\r\n'use strict';\r\n/* qr.js -- QR code generator in Javascript (revision 2011-01-19)\r\n * Written by Kang Seonghoon <public+qrjs@mearie.org>.\r\n *\r\n * This source code is in the public domain; if your jurisdiction does not\r\n * recognize the public domain the terms of Creative Commons CC0 license\r\n * apply. In the other words, you can always do what you want.\r\n */\r\n\r\n\r\n// per-version information (cf. JIS X 0510:2004 pp. 30--36, 71)\r\n//\r\n// [0]: the degree of generator polynomial by ECC levels\r\n// [1]: # of code blocks by ECC levels\r\n// [2]: left-top positions of alignment patterns\r\n//\r\n// the number in this table (in particular, [0]) does not exactly match with\r\n// the numbers in the specficiation. see augumenteccs below for the reason.\r\nvar VERSIONS = [\r\n\tnull,\r\n\t[[10, 7, 17, 13], [1, 1, 1, 1], []],\r\n\t[[16, 10, 28, 22], [1, 1, 1, 1], [4, 16]],\r\n\t[[26, 15, 22, 18], [1, 1, 2, 2], [4, 20]],\r\n\t[[18, 20, 16, 26], [2, 1, 4, 2], [4, 24]],\r\n\t[[24, 26, 22, 18], [2, 1, 4, 4], [4, 28]],\r\n\t[[16, 18, 28, 24], [4, 2, 4, 4], [4, 32]],\r\n\t[[18, 20, 26, 18], [4, 2, 5, 6], [4, 20, 36]],\r\n\t[[22, 24, 26, 22], [4, 2, 6, 6], [4, 22, 40]],\r\n\t[[22, 30, 24, 20], [5, 2, 8, 8], [4, 24, 44]],\r\n\t[[26, 18, 28, 24], [5, 4, 8, 8], [4, 26, 48]],\r\n\t[[30, 20, 24, 28], [5, 4, 11, 8], [4, 28, 52]],\r\n\t[[22, 24, 28, 26], [8, 4, 11, 10], [4, 30, 56]],\r\n\t[[22, 26, 22, 24], [9, 4, 16, 12], [4, 32, 60]],\r\n\t[[24, 30, 24, 20], [9, 4, 16, 16], [4, 24, 44, 64]],\r\n\t[[24, 22, 24, 30], [10, 6, 18, 12], [4, 24, 46, 68]],\r\n\t[[28, 24, 30, 24], [10, 6, 16, 17], [4, 24, 48, 72]],\r\n\t[[28, 28, 28, 28], [11, 6, 19, 16], [4, 28, 52, 76]],\r\n\t[[26, 30, 28, 28], [13, 6, 21, 18], [4, 28, 54, 80]],\r\n\t[[26, 28, 26, 26], [14, 7, 25, 21], [4, 28, 56, 84]],\r\n\t[[26, 28, 28, 30], [16, 8, 25, 20], [4, 32, 60, 88]],\r\n\t[[26, 28, 30, 28], [17, 8, 25, 23], [4, 26, 48, 70, 92]],\r\n\t[[28, 28, 24, 30], [17, 9, 34, 23], [4, 24, 48, 72, 96]],\r\n\t[[28, 30, 30, 30], [18, 9, 30, 25], [4, 28, 52, 76, 100]],\r\n\t[[28, 30, 30, 30], [20, 10, 32, 27], [4, 26, 52, 78, 104]],\r\n\t[[28, 26, 30, 30], [21, 12, 35, 29], [4, 30, 56, 82, 108]],\r\n\t[[28, 28, 30, 28], [23, 12, 37, 34], [4, 28, 56, 84, 112]],\r\n\t[[28, 30, 30, 30], [25, 12, 40, 34], [4, 32, 60, 88, 116]],\r\n\t[[28, 30, 30, 30], [26, 13, 42, 35], [4, 24, 48, 72, 96, 120]],\r\n\t[[28, 30, 30, 30], [28, 14, 45, 38], [4, 28, 52, 76, 100, 124]],\r\n\t[[28, 30, 30, 30], [29, 15, 48, 40], [4, 24, 50, 76, 102, 128]],\r\n\t[[28, 30, 30, 30], [31, 16, 51, 43], [4, 28, 54, 80, 106, 132]],\r\n\t[[28, 30, 30, 30], [33, 17, 54, 45], [4, 32, 58, 84, 110, 136]],\r\n\t[[28, 30, 30, 30], [35, 18, 57, 48], [4, 28, 56, 84, 112, 140]],\r\n\t[[28, 30, 30, 30], [37, 19, 60, 51], [4, 32, 60, 88, 116, 144]],\r\n\t[[28, 30, 30, 30], [38, 19, 63, 53], [4, 28, 52, 76, 100, 124, 148]],\r\n\t[[28, 30, 30, 30], [40, 20, 66, 56], [4, 22, 48, 74, 100, 126, 152]],\r\n\t[[28, 30, 30, 30], [43, 21, 70, 59], [4, 26, 52, 78, 104, 130, 156]],\r\n\t[[28, 30, 30, 30], [45, 22, 74, 62], [4, 30, 56, 82, 108, 134, 160]],\r\n\t[[28, 30, 30, 30], [47, 24, 77, 65], [4, 24, 52, 80, 108, 136, 164]],\r\n\t[[28, 30, 30, 30], [49, 25, 81, 68], [4, 28, 56, 84, 112, 140, 168]]];\r\n\r\n// mode constants (cf. Table 2 in JIS X 0510:2004 p. 16)\r\nvar MODE_TERMINATOR = 0;\r\nvar MODE_NUMERIC = 1, MODE_ALPHANUMERIC = 2, MODE_OCTET = 4, MODE_KANJI = 8;\r\n\r\n// validation regexps\r\nvar NUMERIC_REGEXP = /^\\d*$/;\r\nvar ALPHANUMERIC_REGEXP = /^[A-Za-z0-9 $%*+\\-./:]*$/;\r\nvar ALPHANUMERIC_OUT_REGEXP = /^[A-Z0-9 $%*+\\-./:]*$/;\r\n\r\n// ECC levels (cf. Table 22 in JIS X 0510:2004 p. 45)\r\nvar ECCLEVEL_L = 1, ECCLEVEL_M = 0, ECCLEVEL_Q = 3, ECCLEVEL_H = 2;\r\n\r\n// GF(2^8)-to-integer mapping with a reducing polynomial x^8+x^4+x^3+x^2+1\r\n// invariant: GF256_MAP[GF256_INVMAP[i]] == i for all i in [1,256)\r\nvar GF256_MAP = [], GF256_INVMAP = [-1];\r\nfor (var i = 0, v = 1; i < 255; ++i) {\r\n\tGF256_MAP.push(v);\r\n\tGF256_INVMAP[v] = i;\r\n\tv = (v * 2) ^ (v >= 128 ? 0x11d : 0);\r\n}\r\n\r\n// generator polynomials up to degree 30\r\n// (should match with polynomials in JIS X 0510:2004 Appendix A)\r\n//\r\n// generator polynomial of degree K is product of (x-\\alpha^0), (x-\\alpha^1),\r\n// ..., (x-\\alpha^(K-1)). by convention, we omit the K-th coefficient (always 1)\r\n// from the result; also other coefficients are written in terms of the exponent\r\n// to \\alpha to avoid the redundant calculation. (see also calculateecc below.)\r\nvar GF256_GENPOLY = [[]];\r\nfor (var i = 0; i < 30; ++i) {\r\n\tvar prevpoly = GF256_GENPOLY[i], poly = [];\r\n\tfor (var j = 0; j <= i; ++j) {\r\n\t\tvar a = (j < i ? GF256_MAP[prevpoly[j]] : 0);\r\n\t\tvar b = GF256_MAP[(i + (prevpoly[j - 1] || 0)) % 255];\r\n\t\tpoly.push(GF256_INVMAP[a ^ b]);\r\n\t}\r\n\tGF256_GENPOLY.push(poly);\r\n}\r\n\r\n// alphanumeric character mapping (cf. Table 5 in JIS X 0510:2004 p. 19)\r\nvar ALPHANUMERIC_MAP = {};\r\nfor (var i = 0; i < 45; ++i) {\r\n\tALPHANUMERIC_MAP['0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:'.charAt(i)] = i;\r\n}\r\n\r\n// mask functions in terms of row # and column #\r\n// (cf. Table 20 in JIS X 0510:2004 p. 42)\r\n/*jshint unused: false */\r\nvar MASKFUNCS = [\r\n\tfunction (i, j) {\r\n\t\treturn (i + j) % 2 === 0;\r\n\t},\r\n\tfunction (i, j) {\r\n\t\treturn i % 2 === 0;\r\n\t},\r\n\tfunction (i, j) {\r\n\t\treturn j % 3 === 0;\r\n\t},\r\n\tfunction (i, j) {\r\n\t\treturn (i + j) % 3 === 0;\r\n\t},\r\n\tfunction (i, j) {\r\n\t\treturn (((i / 2) | 0) + ((j / 3) | 0)) % 2 === 0;\r\n\t},\r\n\tfunction (i, j) {\r\n\t\treturn (i * j) % 2 + (i * j) % 3 === 0;\r\n\t},\r\n\tfunction (i, j) {\r\n\t\treturn ((i * j) % 2 + (i * j) % 3) % 2 === 0;\r\n\t},\r\n\tfunction (i, j) {\r\n\t\treturn ((i + j) % 2 + (i * j) % 3) % 2 === 0;\r\n\t}];\r\n\r\n// returns true when the version information has to be embeded.\r\nvar needsverinfo = function (ver) {\r\n\treturn ver > 6;\r\n};\r\n\r\n// returns the size of entire QR code for given version.\r\nvar getsizebyver = function (ver) {\r\n\treturn 4 * ver + 17;\r\n};\r\n\r\n// returns the number of bits available for code words in this version.\r\nvar nfullbits = function (ver) {\r\n\t/*\r\n\t * |<--------------- n --------------->|\r\n\t * |        |<----- n-17 ---->|        |\r\n\t * +-------+                ///+-------+ ----\r\n\t * |       |                ///|       |    ^\r\n\t * |  9x9  |       @@@@@    ///|  9x8  |    |\r\n\t * |       | # # # @5x5@ # # # |       |    |\r\n\t * +-------+       @@@@@       +-------+    |\r\n\t *       #                               ---|\r\n\t *                                        ^ |\r\n\t *       #                                |\r\n\t *     @@@@@       @@@@@       @@@@@      | n\r\n\t *     @5x5@       @5x5@       @5x5@   n-17\r\n\t *     @@@@@       @@@@@       @@@@@      | |\r\n\t *       #                                | |\r\n\t * //////                                 v |\r\n\t * //////#                               ---|\r\n\t * +-------+       @@@@@       @@@@@        |\r\n\t * |       |       @5x5@       @5x5@        |\r\n\t * |  8x9  |       @@@@@       @@@@@        |\r\n\t * |       |                                v\r\n\t * +-------+                             ----\r\n\t *\r\n\t * when the entire code has n^2 modules and there are m^2-3 alignment\r\n\t * patterns, we have:\r\n\t * - 225 (= 9x9 + 9x8 + 8x9) modules for finder patterns and\r\n\t *   format information;\r\n\t * - 2n-34 (= 2(n-17)) modules for timing patterns;\r\n\t * - 36 (= 3x6 + 6x3) modules for version information, if any;\r\n\t * - 25m^2-75 (= (m^2-3)(5x5)) modules for alignment patterns\r\n\t *   if any, but 10m-20 (= 2(m-2)x5) of them overlaps with\r\n\t *   timing patterns.\r\n\t */\r\n\tvar v = VERSIONS[ver];\r\n\tvar nbits = 16 * ver * ver + 128 * ver + 64; // finder, timing and format info.\r\n\tif (needsverinfo(ver))\r\n\t\tnbits -= 36; // version information\r\n\tif (v[2].length) { // alignment patterns\r\n\t\tnbits -= 25 * v[2].length * v[2].length - 10 * v[2].length - 55;\r\n\t}\r\n\treturn nbits;\r\n};\r\n\r\n// returns the number of bits available for data portions (i.e. excludes ECC\r\n// bits but includes mode and length bits) in this version and ECC level.\r\nvar ndatabits = function (ver, ecclevel) {\r\n\tvar nbits = nfullbits(ver) & ~7; // no sub-octet code words\r\n\tvar v = VERSIONS[ver];\r\n\tnbits -= 8 * v[0][ecclevel] * v[1][ecclevel]; // ecc bits\r\n\treturn nbits;\r\n};\r\n\r\n// returns the number of bits required for the length of data.\r\n// (cf. Table 3 in JIS X 0510:2004 p. 16)\r\nvar ndatalenbits = function (ver, mode) {\r\n\tswitch (mode) {\r\n\t\tcase MODE_NUMERIC:\r\n\t\t\treturn (ver < 10 ? 10 : ver < 27 ? 12 : 14);\r\n\t\tcase MODE_ALPHANUMERIC:\r\n\t\t\treturn (ver < 10 ? 9 : ver < 27 ? 11 : 13);\r\n\t\tcase MODE_OCTET:\r\n\t\t\treturn (ver < 10 ? 8 : 16);\r\n\t\tcase MODE_KANJI:\r\n\t\t\treturn (ver < 10 ? 8 : ver < 27 ? 10 : 12);\r\n\t}\r\n};\r\n\r\n// returns the maximum length of data possible in given configuration.\r\nvar getmaxdatalen = function (ver, mode, ecclevel) {\r\n\tvar nbits = ndatabits(ver, ecclevel) - 4 - ndatalenbits(ver, mode); // 4 for mode bits\r\n\tswitch (mode) {\r\n\t\tcase MODE_NUMERIC:\r\n\t\t\treturn ((nbits / 10) | 0) * 3 + (nbits % 10 < 4 ? 0 : nbits % 10 < 7 ? 1 : 2);\r\n\t\tcase MODE_ALPHANUMERIC:\r\n\t\t\treturn ((nbits / 11) | 0) * 2 + (nbits % 11 < 6 ? 0 : 1);\r\n\t\tcase MODE_OCTET:\r\n\t\t\treturn (nbits / 8) | 0;\r\n\t\tcase MODE_KANJI:\r\n\t\t\treturn (nbits / 13) | 0;\r\n\t}\r\n};\r\n\r\n// checks if the given data can be encoded in given mode, and returns\r\n// the converted data for the further processing if possible. otherwise\r\n// returns null.\r\n//\r\n// this function does not check the length of data; it is a duty of\r\n// encode function below (as it depends on the version and ECC level too).\r\nvar validatedata = function (mode, data) {\r\n\tswitch (mode) {\r\n\t\tcase MODE_NUMERIC:\r\n\t\t\tif (!data.match(NUMERIC_REGEXP))\r\n\t\t\t\treturn null;\r\n\t\t\treturn data;\r\n\r\n\t\tcase MODE_ALPHANUMERIC:\r\n\t\t\tif (!data.match(ALPHANUMERIC_REGEXP))\r\n\t\t\t\treturn null;\r\n\t\t\treturn data.toUpperCase();\r\n\r\n\t\tcase MODE_OCTET:\r\n\t\t\tif (typeof data === 'string') { // encode as utf-8 string\r\n\t\t\t\tvar newdata = [];\r\n\t\t\t\tfor (var i = 0; i < data.length; ++i) {\r\n\t\t\t\t\tvar ch = data.charCodeAt(i);\r\n\t\t\t\t\tif (ch < 0x80) {\r\n\t\t\t\t\t\tnewdata.push(ch);\r\n\t\t\t\t\t} else if (ch < 0x800) {\r\n\t\t\t\t\t\tnewdata.push(0xc0 | (ch >> 6),\r\n\t\t\t\t\t\t\t0x80 | (ch & 0x3f));\r\n\t\t\t\t\t} else if (ch < 0x10000) {\r\n\t\t\t\t\t\tnewdata.push(0xe0 | (ch >> 12),\r\n\t\t\t\t\t\t\t0x80 | ((ch >> 6) & 0x3f),\r\n\t\t\t\t\t\t\t0x80 | (ch & 0x3f));\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tnewdata.push(0xf0 | (ch >> 18),\r\n\t\t\t\t\t\t\t0x80 | ((ch >> 12) & 0x3f),\r\n\t\t\t\t\t\t\t0x80 | ((ch >> 6) & 0x3f),\r\n\t\t\t\t\t\t\t0x80 | (ch & 0x3f));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn newdata;\r\n\t\t\t} else {\r\n\t\t\t\treturn data;\r\n\t\t\t}\r\n\t}\r\n};\r\n\r\n// returns the code words (sans ECC bits) for given data and configurations.\r\n// requires data to be preprocessed by validatedata. no length check is\r\n// performed, and everything has to be checked before calling this function.\r\nvar encode = function (ver, mode, data, maxbuflen) {\r\n\tvar buf = [];\r\n\tvar bits = 0, remaining = 8;\r\n\tvar datalen = data.length;\r\n\r\n\t// this function is intentionally no-op when n=0.\r\n\tvar pack = function (x, n) {\r\n\t\tif (n >= remaining) {\r\n\t\t\tbuf.push(bits | (x >> (n -= remaining)));\r\n\t\t\twhile (n >= 8)\r\n\t\t\t\tbuf.push((x >> (n -= 8)) & 255);\r\n\t\t\tbits = 0;\r\n\t\t\tremaining = 8;\r\n\t\t}\r\n\t\tif (n > 0)\r\n\t\t\tbits |= (x & ((1 << n) - 1)) << (remaining -= n);\r\n\t};\r\n\r\n\tvar nlenbits = ndatalenbits(ver, mode);\r\n\tpack(mode, 4);\r\n\tpack(datalen, nlenbits);\r\n\r\n\tswitch (mode) {\r\n\t\tcase MODE_NUMERIC:\r\n\t\t\tfor (var i = 2; i < datalen; i += 3) {\r\n\t\t\t\tpack(parseInt(data.substring(i - 2, i + 1), 10), 10);\r\n\t\t\t}\r\n\t\t\tpack(parseInt(data.substring(i - 2), 10), [0, 4, 7][datalen % 3]);\r\n\t\t\tbreak;\r\n\r\n\t\tcase MODE_ALPHANUMERIC:\r\n\t\t\tfor (var i = 1; i < datalen; i += 2) {\r\n\t\t\t\tpack(ALPHANUMERIC_MAP[data.charAt(i - 1)] * 45 +\r\n\t\t\t\t\tALPHANUMERIC_MAP[data.charAt(i)], 11);\r\n\t\t\t}\r\n\t\t\tif (datalen % 2 == 1) {\r\n\t\t\t\tpack(ALPHANUMERIC_MAP[data.charAt(i - 1)], 6);\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\r\n\t\tcase MODE_OCTET:\r\n\t\t\tfor (var i = 0; i < datalen; ++i) {\r\n\t\t\t\tpack(data[i], 8);\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\t// final bits. it is possible that adding terminator causes the buffer\r\n\t// to overflow, but then the buffer truncated to the maximum size will\r\n\t// be valid as the truncated terminator mode bits and padding is\r\n\t// identical in appearance (cf. JIS X 0510:2004 sec 8.4.8).\r\n\tpack(MODE_TERMINATOR, 4);\r\n\tif (remaining < 8)\r\n\t\tbuf.push(bits);\r\n\r\n\t// the padding to fill up the remaining space. we should not add any\r\n\t// words when the overflow already occurred.\r\n\twhile (buf.length + 1 < maxbuflen)\r\n\t\tbuf.push(0xec, 0x11);\r\n\tif (buf.length < maxbuflen)\r\n\t\tbuf.push(0xec);\r\n\treturn buf;\r\n};\r\n\r\n// calculates ECC code words for given code words and generator polynomial.\r\n//\r\n// this is quite similar to CRC calculation as both Reed-Solomon and CRC use\r\n// the certain kind of cyclic codes, which is effectively the division of\r\n// zero-augumented polynomial by the generator polynomial. the only difference\r\n// is that Reed-Solomon uses GF(2^8), instead of CRC's GF(2), and Reed-Solomon\r\n// uses the different generator polynomial than CRC's.\r\nvar calculateecc = function (poly, genpoly) {\r\n\tvar modulus = poly.slice(0);\r\n\tvar polylen = poly.length, genpolylen = genpoly.length;\r\n\tfor (var i = 0; i < genpolylen; ++i)\r\n\t\tmodulus.push(0);\r\n\tfor (var i = 0; i < polylen; ) {\r\n\t\tvar quotient = GF256_INVMAP[modulus[i++]];\r\n\t\tif (quotient >= 0) {\r\n\t\t\tfor (var j = 0; j < genpolylen; ++j) {\r\n\t\t\t\tmodulus[i + j] ^= GF256_MAP[(quotient + genpoly[j]) % 255];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn modulus.slice(polylen);\r\n};\r\n\r\n// auguments ECC code words to given code words. the resulting words are\r\n// ready to be encoded in the matrix.\r\n//\r\n// the much of actual augumenting procedure follows JIS X 0510:2004 sec 8.7.\r\n// the code is simplified using the fact that the size of each code & ECC\r\n// blocks is almost same; for example, when we have 4 blocks and 46 data words\r\n// the number of code words in those blocks are 11, 11, 12, 12 respectively.\r\nvar augumenteccs = function (poly, nblocks, genpoly) {\r\n\tvar subsizes = [];\r\n\tvar subsize = (poly.length / nblocks) | 0, subsize0 = 0;\r\n\tvar pivot = nblocks - poly.length % nblocks;\r\n\tfor (var i = 0; i < pivot; ++i) {\r\n\t\tsubsizes.push(subsize0);\r\n\t\tsubsize0 += subsize;\r\n\t}\r\n\tfor (var i = pivot; i < nblocks; ++i) {\r\n\t\tsubsizes.push(subsize0);\r\n\t\tsubsize0 += subsize + 1;\r\n\t}\r\n\tsubsizes.push(subsize0);\r\n\r\n\tvar eccs = [];\r\n\tfor (var i = 0; i < nblocks; ++i) {\r\n\t\teccs.push(calculateecc(poly.slice(subsizes[i], subsizes[i + 1]), genpoly));\r\n\t}\r\n\r\n\tvar result = [];\r\n\tvar nitemsperblock = (poly.length / nblocks) | 0;\r\n\tfor (var i = 0; i < nitemsperblock; ++i) {\r\n\t\tfor (var j = 0; j < nblocks; ++j) {\r\n\t\t\tresult.push(poly[subsizes[j] + i]);\r\n\t\t}\r\n\t}\r\n\tfor (var j = pivot; j < nblocks; ++j) {\r\n\t\tresult.push(poly[subsizes[j + 1] - 1]);\r\n\t}\r\n\tfor (var i = 0; i < genpoly.length; ++i) {\r\n\t\tfor (var j = 0; j < nblocks; ++j) {\r\n\t\t\tresult.push(eccs[j][i]);\r\n\t\t}\r\n\t}\r\n\treturn result;\r\n};\r\n\r\n// auguments BCH(p+q,q) code to the polynomial over GF(2), given the proper\r\n// genpoly. the both input and output are in binary numbers, and unlike\r\n// calculateecc genpoly should include the 1 bit for the highest degree.\r\n//\r\n// actual polynomials used for this procedure are as follows:\r\n// - p=10, q=5, genpoly=x^10+x^8+x^5+x^4+x^2+x+1 (JIS X 0510:2004 Appendix C)\r\n// - p=18, q=6, genpoly=x^12+x^11+x^10+x^9+x^8+x^5+x^2+1 (ibid. Appendix D)\r\nvar augumentbch = function (poly, p, genpoly, q) {\r\n\tvar modulus = poly << q;\r\n\tfor (var i = p - 1; i >= 0; --i) {\r\n\t\tif ((modulus >> (q + i)) & 1)\r\n\t\t\tmodulus ^= genpoly << i;\r\n\t}\r\n\treturn (poly << q) | modulus;\r\n};\r\n\r\n// creates the base matrix for given version. it returns two matrices, one of\r\n// them is the actual one and the another represents the \"reserved\" portion\r\n// (e.g. finder and timing patterns) of the matrix.\r\n//\r\n// some entries in the matrix may be undefined, rather than 0 or 1. this is\r\n// intentional (no initialization needed!), and putdata below will fill\r\n// the remaining ones.\r\nvar makebasematrix = function (ver) {\r\n\tvar v = VERSIONS[ver], n = getsizebyver(ver);\r\n\tvar matrix = [], reserved = [];\r\n\tfor (var i = 0; i < n; ++i) {\r\n\t\tmatrix.push([]);\r\n\t\treserved.push([]);\r\n\t}\r\n\r\n\tvar blit = function (y, x, h, w, bits) {\r\n\t\tfor (var i = 0; i < h; ++i) {\r\n\t\t\tfor (var j = 0; j < w; ++j) {\r\n\t\t\t\tmatrix[y + i][x + j] = (bits[i] >> j) & 1;\r\n\t\t\t\treserved[y + i][x + j] = 1;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// finder patterns and a part of timing patterns\r\n\t// will also mark the format information area (not yet written) as reserved.\r\n\tblit(0, 0, 9, 9, [0x7f, 0x41, 0x5d, 0x5d, 0x5d, 0x41, 0x17f, 0x00, 0x40]);\r\n\tblit(n - 8, 0, 8, 9, [0x100, 0x7f, 0x41, 0x5d, 0x5d, 0x5d, 0x41, 0x7f]);\r\n\tblit(0, n - 8, 9, 8, [0xfe, 0x82, 0xba, 0xba, 0xba, 0x82, 0xfe, 0x00, 0x00]);\r\n\r\n\t// the rest of timing patterns\r\n\tfor (var i = 9; i < n - 8; ++i) {\r\n\t\tmatrix[6][i] = matrix[i][6] = ~i & 1;\r\n\t\treserved[6][i] = reserved[i][6] = 1;\r\n\t}\r\n\r\n\t// alignment patterns\r\n\tvar aligns = v[2], m = aligns.length;\r\n\tfor (var i = 0; i < m; ++i) {\r\n\t\tvar minj = (i === 0 || i === m - 1 ? 1 : 0), maxj = (i === 0 ? m - 1 : m);\r\n\t\tfor (var j = minj; j < maxj; ++j) {\r\n\t\t\tblit(aligns[i], aligns[j], 5, 5, [0x1f, 0x11, 0x15, 0x11, 0x1f]);\r\n\t\t}\r\n\t}\r\n\r\n\t// version information\r\n\tif (needsverinfo(ver)) {\r\n\t\tvar code = augumentbch(ver, 6, 0x1f25, 12);\r\n\t\tvar k = 0;\r\n\t\tfor (var i = 0; i < 6; ++i) {\r\n\t\t\tfor (var j = 0; j < 3; ++j) {\r\n\t\t\t\tmatrix[i][(n - 11) + j] = matrix[(n - 11) + j][i] = (code >> k++) & 1;\r\n\t\t\t\treserved[i][(n - 11) + j] = reserved[(n - 11) + j][i] = 1;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn {matrix: matrix, reserved: reserved};\r\n};\r\n\r\n// fills the data portion (i.e. unmarked in reserved) of the matrix with given\r\n// code words. the size of code words should be no more than available bits,\r\n// and remaining bits are padded to 0 (cf. JIS X 0510:2004 sec 8.7.3).\r\nvar putdata = function (matrix, reserved, buf) {\r\n\tvar n = matrix.length;\r\n\tvar k = 0, dir = -1;\r\n\tfor (var i = n - 1; i >= 0; i -= 2) {\r\n\t\tif (i == 6)\r\n\t\t\t--i; // skip the entire timing pattern column\r\n\t\tvar jj = (dir < 0 ? n - 1 : 0);\r\n\t\tfor (var j = 0; j < n; ++j) {\r\n\t\t\tfor (var ii = i; ii > i - 2; --ii) {\r\n\t\t\t\tif (!reserved[jj][ii]) {\r\n\t\t\t\t\t// may overflow, but (undefined >> x)\r\n\t\t\t\t\t// is 0 so it will auto-pad to zero.\r\n\t\t\t\t\tmatrix[jj][ii] = (buf[k >> 3] >> (~k & 7)) & 1;\r\n\t\t\t\t\t++k;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tjj += dir;\r\n\t\t}\r\n\t\tdir = -dir;\r\n\t}\r\n\treturn matrix;\r\n};\r\n\r\n// XOR-masks the data portion of the matrix. repeating the call with the same\r\n// arguments will revert the prior call (convenient in the matrix evaluation).\r\nvar maskdata = function (matrix, reserved, mask) {\r\n\tvar maskf = MASKFUNCS[mask];\r\n\tvar n = matrix.length;\r\n\tfor (var i = 0; i < n; ++i) {\r\n\t\tfor (var j = 0; j < n; ++j) {\r\n\t\t\tif (!reserved[i][j])\r\n\t\t\t\tmatrix[i][j] ^= maskf(i, j);\r\n\t\t}\r\n\t}\r\n\treturn matrix;\r\n};\r\n\r\n// puts the format information.\r\nvar putformatinfo = function (matrix, reserved, ecclevel, mask) {\r\n\tvar n = matrix.length;\r\n\tvar code = augumentbch((ecclevel << 3) | mask, 5, 0x537, 10) ^ 0x5412;\r\n\tfor (var i = 0; i < 15; ++i) {\r\n\t\tvar r = [0, 1, 2, 3, 4, 5, 7, 8, n - 7, n - 6, n - 5, n - 4, n - 3, n - 2, n - 1][i];\r\n\t\tvar c = [n - 1, n - 2, n - 3, n - 4, n - 5, n - 6, n - 7, n - 8, 7, 5, 4, 3, 2, 1, 0][i];\r\n\t\tmatrix[r][8] = matrix[8][c] = (code >> i) & 1;\r\n\t\t// we don't have to mark those bits reserved; always done\r\n\t\t// in makebasematrix above.\r\n\t}\r\n\treturn matrix;\r\n};\r\n\r\n// evaluates the resulting matrix and returns the score (lower is better).\r\n// (cf. JIS X 0510:2004 sec 8.8.2)\r\n//\r\n// the evaluation procedure tries to avoid the problematic patterns naturally\r\n// occuring from the original matrix. for example, it penaltizes the patterns\r\n// which just look like the finder pattern which will confuse the decoder.\r\n// we choose the mask which results in the lowest score among 8 possible ones.\r\n//\r\n// note: zxing seems to use the same procedure and in many cases its choice\r\n// agrees to ours, but sometimes it does not. practically it doesn't matter.\r\nvar evaluatematrix = function (matrix) {\r\n\t// N1+(k-5) points for each consecutive row of k same-colored modules,\r\n\t// where k >= 5. no overlapping row counts.\r\n\tvar PENALTY_CONSECUTIVE = 3;\r\n\t// N2 points for each 2x2 block of same-colored modules.\r\n\t// overlapping block does count.\r\n\tvar PENALTY_TWOBYTWO = 3;\r\n\t// N3 points for each pattern with >4W:1B:1W:3B:1W:1B or\r\n\t// 1B:1W:3B:1W:1B:>4W, or their multiples (e.g. highly unlikely,\r\n\t// but 13W:3B:3W:9B:3W:3B counts).\r\n\tvar PENALTY_FINDERLIKE = 40;\r\n\t// N4*k points for every (5*k)% deviation from 50% black density.\r\n\t// i.e. k=1 for 55~60% and 40~45%, k=2 for 60~65% and 35~40%, etc.\r\n\tvar PENALTY_DENSITY = 10;\r\n\r\n\tvar evaluategroup = function (groups) { // assumes [W,B,W,B,W,...,B,W]\r\n\t\tvar score = 0;\r\n\t\tfor (var i = 0; i < groups.length; ++i) {\r\n\t\t\tif (groups[i] >= 5)\r\n\t\t\t\tscore += PENALTY_CONSECUTIVE + (groups[i] - 5);\r\n\t\t}\r\n\t\tfor (var i = 5; i < groups.length; i += 2) {\r\n\t\t\tvar p = groups[i];\r\n\t\t\tif (groups[i - 1] == p && groups[i - 2] == 3 * p && groups[i - 3] == p &&\r\n\t\t\t\tgroups[i - 4] == p && (groups[i - 5] >= 4 * p || groups[i + 1] >= 4 * p)) {\r\n\t\t\t\t// this part differs from zxing...\r\n\t\t\t\tscore += PENALTY_FINDERLIKE;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn score;\r\n\t};\r\n\r\n\tvar n = matrix.length;\r\n\tvar score = 0, nblacks = 0;\r\n\tfor (var i = 0; i < n; ++i) {\r\n\t\tvar row = matrix[i];\r\n\t\tvar groups;\r\n\r\n\t\t// evaluate the current row\r\n\t\tgroups = [0]; // the first empty group of white\r\n\t\tfor (var j = 0; j < n; ) {\r\n\t\t\tvar k;\r\n\t\t\tfor (k = 0; j < n && row[j]; ++k)\r\n\t\t\t\t++j;\r\n\t\t\tgroups.push(k);\r\n\t\t\tfor (k = 0; j < n && !row[j]; ++k)\r\n\t\t\t\t++j;\r\n\t\t\tgroups.push(k);\r\n\t\t}\r\n\t\tscore += evaluategroup(groups);\r\n\r\n\t\t// evaluate the current column\r\n\t\tgroups = [0];\r\n\t\tfor (var j = 0; j < n; ) {\r\n\t\t\tvar k;\r\n\t\t\tfor (k = 0; j < n && matrix[j][i]; ++k)\r\n\t\t\t\t++j;\r\n\t\t\tgroups.push(k);\r\n\t\t\tfor (k = 0; j < n && !matrix[j][i]; ++k)\r\n\t\t\t\t++j;\r\n\t\t\tgroups.push(k);\r\n\t\t}\r\n\t\tscore += evaluategroup(groups);\r\n\r\n\t\t// check the 2x2 box and calculate the density\r\n\t\tvar nextrow = matrix[i + 1] || [];\r\n\t\tnblacks += row[0];\r\n\t\tfor (var j = 1; j < n; ++j) {\r\n\t\t\tvar p = row[j];\r\n\t\t\tnblacks += p;\r\n\t\t\t// at least comparison with next row should be strict...\r\n\t\t\tif (row[j - 1] == p && nextrow[j] === p && nextrow[j - 1] === p) {\r\n\t\t\t\tscore += PENALTY_TWOBYTWO;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tscore += PENALTY_DENSITY * ((Math.abs(nblacks / n / n - 0.5) / 0.05) | 0);\r\n\treturn score;\r\n};\r\n\r\n// returns the fully encoded QR code matrix which contains given data.\r\n// it also chooses the best mask automatically when mask is -1.\r\nvar generate = function (data, ver, mode, ecclevel, mask) {\r\n\tvar v = VERSIONS[ver];\r\n\tvar buf = encode(ver, mode, data, ndatabits(ver, ecclevel) >> 3);\r\n\tbuf = augumenteccs(buf, v[1][ecclevel], GF256_GENPOLY[v[0][ecclevel]]);\r\n\r\n\tvar result = makebasematrix(ver);\r\n\tvar matrix = result.matrix, reserved = result.reserved;\r\n\tputdata(matrix, reserved, buf);\r\n\r\n\tif (mask < 0) {\r\n\t\t// find the best mask\r\n\t\tmaskdata(matrix, reserved, 0);\r\n\t\tputformatinfo(matrix, reserved, ecclevel, 0);\r\n\t\tvar bestmask = 0, bestscore = evaluatematrix(matrix);\r\n\t\tmaskdata(matrix, reserved, 0);\r\n\t\tfor (mask = 1; mask < 8; ++mask) {\r\n\t\t\tmaskdata(matrix, reserved, mask);\r\n\t\t\tputformatinfo(matrix, reserved, ecclevel, mask);\r\n\t\t\tvar score = evaluatematrix(matrix);\r\n\t\t\tif (bestscore > score) {\r\n\t\t\t\tbestscore = score;\r\n\t\t\t\tbestmask = mask;\r\n\t\t\t}\r\n\t\t\tmaskdata(matrix, reserved, mask);\r\n\t\t}\r\n\t\tmask = bestmask;\r\n\t}\r\n\r\n\tmaskdata(matrix, reserved, mask);\r\n\tputformatinfo(matrix, reserved, ecclevel, mask);\r\n\treturn matrix;\r\n};\r\n\r\n// the public interface is trivial; the options available are as follows:\r\n//\r\n// - version: an integer in [1,40]. when omitted (or -1) the smallest possible\r\n//   version is chosen.\r\n// - mode: one of 'numeric', 'alphanumeric', 'octet'. when omitted the smallest\r\n//   possible mode is chosen.\r\n// - eccLevel: one of 'L', 'M', 'Q', 'H'. defaults to 'L'.\r\n// - mask: an integer in [0,7]. when omitted (or -1) the best mask is chosen.\r\n//\r\n\r\nfunction generateFrame(data, options) {\r\n\tvar MODES = {'numeric': MODE_NUMERIC, 'alphanumeric': MODE_ALPHANUMERIC,\r\n\t\t'octet': MODE_OCTET};\r\n\tvar ECCLEVELS = {'L': ECCLEVEL_L, 'M': ECCLEVEL_M, 'Q': ECCLEVEL_Q,\r\n\t\t'H': ECCLEVEL_H};\r\n\r\n\toptions = options || {};\r\n\tvar ver = options.version || -1;\r\n\tvar ecclevel = ECCLEVELS[(options.eccLevel || 'L').toUpperCase()];\r\n\tvar mode = options.mode ? MODES[options.mode.toLowerCase()] : -1;\r\n\tvar mask = 'mask' in options ? options.mask : -1;\r\n\r\n\tif (mode < 0) {\r\n\t\tif (typeof data === 'string') {\r\n\t\t\tif (data.match(NUMERIC_REGEXP)) {\r\n\t\t\t\tmode = MODE_NUMERIC;\r\n\t\t\t} else if (data.match(ALPHANUMERIC_OUT_REGEXP)) {\r\n\t\t\t\t// while encode supports case-insensitive encoding, we restrict the data to be uppercased when auto-selecting the mode.\r\n\t\t\t\tmode = MODE_ALPHANUMERIC;\r\n\t\t\t} else {\r\n\t\t\t\tmode = MODE_OCTET;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tmode = MODE_OCTET;\r\n\t\t}\r\n\t} else if (!(mode == MODE_NUMERIC || mode == MODE_ALPHANUMERIC ||\r\n\t\tmode == MODE_OCTET)) {\r\n\t\tthrow 'invalid or unsupported mode';\r\n\t}\r\n\r\n\tdata = validatedata(mode, data);\r\n\tif (data === null)\r\n\t\tthrow 'invalid data format';\r\n\r\n\tif (ecclevel < 0 || ecclevel > 3)\r\n\t\tthrow 'invalid ECC level';\r\n\r\n\tif (ver < 0) {\r\n\t\tfor (ver = 1; ver <= 40; ++ver) {\r\n\t\t\tif (data.length <= getmaxdatalen(ver, mode, ecclevel))\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\tif (ver > 40)\r\n\t\t\tthrow 'too large data for the Qr format';\r\n\t} else if (ver < 1 || ver > 40) {\r\n\t\tthrow 'invalid Qr version! should be between 1 and 40';\r\n\t}\r\n\r\n\tif (mask != -1 && (mask < 0 || mask > 8))\r\n\t\tthrow 'invalid mask';\r\n\t//console.log('version:', ver, 'mode:', mode, 'ECC:', ecclevel, 'mask:', mask )\r\n\treturn generate(data, ver, mode, ecclevel, mask);\r\n}\r\n\r\n\r\n// options\r\n// - modulesize: a number. this is a size of each modules in pixels, and\r\n//   defaults to 5px.\r\n// - margin: a number. this is a size of margin in *modules*, and defaults to\r\n//   4 (white modules). the specficiation mandates the margin no less than 4\r\n//   modules, so it is better not to alter this value unless you know what\r\n//   you're doing.\r\nfunction buildCanvas(data, options) {\r\n\r\n\tvar canvas = [];\r\n\tvar background = options.background || '#fff';\r\n\tvar foreground = options.foreground || '#000';\r\n\t//var margin = options.margin || 4;\r\n\tvar matrix = generateFrame(data, options);\r\n\tvar n = matrix.length;\r\n\tvar modSize = Math.floor(options.fit ? options.fit / n : 5);\r\n\tvar size = n * modSize;\r\n\r\n\tcanvas.push({\r\n\t\ttype: 'rect',\r\n\t\tx: 0, y: 0, w: size, h: size, lineWidth: 0, color: background\r\n\t});\r\n\r\n\tfor (var i = 0; i < n; ++i) {\r\n\t\tfor (var j = 0; j < n; ++j) {\r\n\t\t\tif (matrix[i][j]) {\r\n\t\t\t\tcanvas.push({\r\n\t\t\t\t\ttype: 'rect',\r\n\t\t\t\t\tx: modSize * j,\r\n\t\t\t\t\ty: modSize * i,\r\n\t\t\t\t\tw: modSize,\r\n\t\t\t\t\th: modSize,\r\n\t\t\t\t\tlineWidth: 0,\r\n\t\t\t\t\tcolor: foreground\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tcanvas: canvas,\r\n\t\tsize: size\r\n\t};\r\n\r\n}\r\n\r\nfunction measure(node) {\r\n\tvar cd = buildCanvas(node.qr, node);\r\n\tnode._canvas = cd.canvas;\r\n\tnode._width = node._height = node._minWidth = node._maxWidth = node._minHeight = node._maxHeight = cd.size;\r\n\treturn node;\r\n}\r\n\r\nmodule.exports = {\r\n\tmeasure: measure\r\n};"]},"metadata":{},"sourceType":"script"}